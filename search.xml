<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[css-position详解]]></title>
      <url>/2018/02/07/css-position%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>从明天起 做一个幸福的人，劈柴、喂马、周游世界，从明天起 关心粮食和蔬菜，我有一所房子，面朝大海，春暖花开。 ——海子《面朝大海，春暖花开》节选</p>
</blockquote>
<h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3><ul>
<li>absolute：生成绝对定位的元素，元素脱离正常文档流，相对于static定位以外的 第一个父元素 进行定位。元素的位置通过”top”、”right”、”bottom”、”left”属性进行规定。层叠通过z-index属性定义</li>
<li>fixed：生成固定定位的元素，元素脱离正常文档流，相对于浏览器窗口进行定位。元素的位置通过”top”、”right”、”bottom”、”left”属性进行规定。</li>
<li>relative: 生成相对定位的元素，元素遵循正常文档流，相对于其正常位置进行定位。按照元素的原始位置进行移动</li>
<li>static：默认值。没有定位，元素遵循正常的文档流中（ top, bottom, left, right 或者 z-index 声明不会被应用）。</li>
<li>inherit：规定应该从父元素继承position属性的值。</li>
</ul>
<a id="more"></a>
<h3 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h3><p>上面都提到了一个定义——文档流，文档流其实就是文档的输出顺序，也就是我们通常看到的由左到右、由上到下的输出形式。而float、position两个属性就可以将元素从文档流中脱离出来。<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fo81bpk4k4j31kw0wuk02.jpg" alt=""><br><a href="../htmls/position.html">代码效果示例</a></p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css水平垂直居中]]></title>
      <url>/2018/02/07/css%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
      <content type="html"><![CDATA[<blockquote>
<p>沧浪之水清兮，可以濯吾缨；沧浪之水浊兮，可以濯吾足。——《渔父》</p>
</blockquote>
<h3 id="单行文本："><a href="#单行文本：" class="headerlink" title="单行文本："></a>单行文本：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.one&#123;</span><br><span class="line">    line-height:100px; </span><br><span class="line">    text-align:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本:"></a>多行文本:</h3><p>把文字当图片处理，用span包裹，然后处理成图片display:inline-block, 然后父元素设置table-cell<br><a id="more"></a></p>
<h4 id="table-cell-verticial-align-父元素-设置为table-cell，子元素设置为-inline-block"><a href="#table-cell-verticial-align-父元素-设置为table-cell，子元素设置为-inline-block" class="headerlink" title="table-cell + verticial-align,父元素 设置为table-cell，子元素设置为 inline-block"></a>table-cell + verticial-align,父元素 设置为table-cell，子元素设置为 inline-block</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    display:table-cell;</span><br><span class="line">    text-align:center;</span><br><span class="line">    vertical-align:middle;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">   display:inline-block;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="绝对定位-负外边距，兼容性好，缺点是需要-元素大小固定"><a href="#绝对定位-负外边距，兼容性好，缺点是需要-元素大小固定" class="headerlink" title="绝对定位 + 负外边距，兼容性好，缺点是需要 元素大小固定"></a>绝对定位 + 负外边距，兼容性好，缺点是需要 元素大小固定</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    height: 100px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    margin-top: -50px; //高度、宽度的一半</span><br><span class="line">    margin-left: -100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="绝对定位盒模型和margin：0-auto"><a href="#绝对定位盒模型和margin：0-auto" class="headerlink" title="绝对定位盒模型和margin：0 auto"></a>绝对定位盒模型和margin：0 auto</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.parent&#123;</span><br><span class="line">   position:relative;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">.child&#123;</span><br><span class="line">   position:absolute;</span><br><span class="line">   top:0;</span><br><span class="line">   left:0;</span><br><span class="line">   right:0;</span><br><span class="line">   bottom:0;</span><br><span class="line">   margin:0 auto;</span><br><span class="line">   width:100px;</span><br><span class="line">   height:200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="绝对定位-transform"><a href="#绝对定位-transform" class="headerlink" title="绝对定位 + transform"></a>绝对定位 + transform</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.child &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 50%;</span><br><span class="line">    left: 50%;</span><br><span class="line">    transform: translateY(-50%);</span><br><span class="line">    transform: translateX(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-router实现原理]]></title>
      <url>/2018/02/07/react-router%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>跌的鼻青脸肿不怕，却绝不可以容忍自己眉目不扬 ——朱天文《最想念的季节》</p>
</blockquote>
<h3 id="react-router依赖基础-——-history"><a href="#react-router依赖基础-——-history" class="headerlink" title="react-router依赖基础 —— history"></a>react-router依赖基础 —— history</h3>]]></content>
      
        
        <tags>
            
            <tag> react-router </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node初研]]></title>
      <url>/2018/02/07/Node%E5%88%9D%E7%A0%94/</url>
      <content type="html"><![CDATA[<h4 id="Node应用有哪几部分组成"><a href="#Node应用有哪几部分组成" class="headerlink" title="Node应用有哪几部分组成"></a>Node应用有哪几部分组成</h4><ul>
<li>引入required模块：我们可以使用require指令来载入 Node.js 模块</li>
<li>创建服务器：服务器可以监听客户端的请求，类似于Apache、Nginx等HTTP服务器</li>
<li>接受请求与响应请求：服务器很容易创建，客户端可以使用浏览器或终端发送HTTP请求，服务器接受请求后返回响应数据</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6温故知新]]></title>
      <url>/2018/02/06/ES6%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>人生由无数选择组成 ——龙龙《随笔》</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重新认识js]]></title>
      <url>/2018/01/29/%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86js/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我们似乎很容易就会安于现状，怀疑着、踟蹰着不敢向前迈出一步，但等自己真的尝试去做了，霍然回首，原来也不是很难，又成长了一些。  ——龙龙 《随笔》</p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>1995年，netscape公司一位名叫Brendan Eich的工程师创造了JavaScript，当时js名为LiveScript，后来因为sun公司的Java语言的兴起和广泛使用，Netscape出于宣传和推广的考虑，更名为JavaScript。尽管两者之间咩有什么共同点，这便是产生混淆的根源。<br>与大多数编程语言不同，Js并没有输入或输出的概念。他是一个在宿主环境下运行的脚本语言，任何与外界沟通的机制都是由宿主环境提供的。浏览器是最常见的宿主环境，但在非常多的其他程序中也包含JS解释器，如Adobe Acrobat、Photoshop、SVG图像、Yahoo！的Widget引擎，以及Node.js之类的服务器环境。JS的实际应用远不止这些，还有NoSQL数据库、嵌入式计算机，以及包括GNOME在内的桌面环境等等<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fo5uo6w5iej303z045dfw.jpg" alt=""><br><a id="more"></a></p>
<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>JS是一种面向对象的动态语言，它包含类型、运算符、标准内置对象和方法。</p>
<ul>
<li>js的语法来源于Java和C，所以这两种语言的许多语法特性同样适用于JavaScropt</li>
<li>js并不支持类，类的概念在js中通过对象原型得到延续。</li>
<li>js中的函数也是对象，js允许函数在包含可执行代码的同时，能像其他对象一样被传递</li>
</ul>
<h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p> 任何编程语言都必不可少的组成部分——类型，js的类型包括（7种）</p>
<ul>
<li>Number（数字）</li>
<li>String (字符串)</li>
<li>Boolean（布尔值）</li>
<li>Symbol（符号）（ES6新增）</li>
<li>Object（对象）（万物皆对象）<ul>
<li>Function（函数）</li>
<li>Array（数组）</li>
<li>Date（日期）</li>
<li>RegExp（正则）</li>
</ul>
</li>
<li>Null（空）</li>
<li>Undefined(未定义)</li>
</ul>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>js采用“IEEE 754”标准定义的双精度64位格式表示数字，和其他编程语言不同，js不区分整数和浮点数，所有数字在js中均用浮点数值表示。<br>在具体实现时，整数值通常被视为32位整型变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.1+0.2===0.30000000000000004 //true</span><br></pre></td></tr></table></figure></p>
<p>js支持标准的算术运算符，加减、取模（取余）,内置对象Math等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.sin(3.5);</span><br><span class="line">var d = Math.PI*(r+r)</span><br></pre></td></tr></table></figure></p>
<p>内置对象parseInt(),将字符串转化成整型，该函数的第二个参数表示字符串所表示的数字的基（进制）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&apos;123&apos;,10);// 123</span><br><span class="line">parseInt(&apos;11&apos;,2); // 3 二进制数字字符串转化成整数值</span><br></pre></td></tr></table></figure></p>
<p>js还有个类似的内置函数parseFloat(),用以解析浮点数字符串，并且只应用于解析十进制数字<br>单元运算符 + 也可以吧数字字符串转换成数值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ &apos;42&apos;; // 42</span><br><span class="line">+ &apos;0x10&apos;; // 16  函数把0x解析成16进制</span><br></pre></td></tr></table></figure></p>
<p>如果给定的字符串不存在数值形式，函数会返回一个特殊的值 NaN<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parseInt(&apos;hello&apos;,10); //NaN</span><br></pre></td></tr></table></figure></p>
<p>要小心NaN:如果把NaN作为参数进行数学运算，结果也会是NaN：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NaN + 5; // NaN</span><br></pre></td></tr></table></figure></p>
<p>可以使用内置函数isNaN()来判断一个变量是否为NaN：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isNaN(NaN) //true</span><br></pre></td></tr></table></figure></p>
<p>js还有两个特殊的值:Infinity(正无穷)和-Infinity(负无穷)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1/0; //Infinity</span><br><span class="line">-1/0; //-Infinity</span><br></pre></td></tr></table></figure></p>
<p>可以使用内置函数isFinite()来判断一个变量是否是一个有穷数，如果类型为 Infinity、-Infinity、NaN、则返回false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">isFinite(1/0); //false</span><br><span class="line">isFinite(Infinity); //false   finite(有限的、有穷的)</span><br><span class="line">isFinite(NaN); //false</span><br><span class="line"></span><br><span class="line">isFinite(0); //true   Number.isFinite(0); //true</span><br><span class="line">isFinite(&quot;0&quot;);// true  如果是纯数值类型的检测，则返回false  Number.isFinite(&quot;0&quot;); //false  </span><br><span class="line">isFinite(2e74);//true</span><br></pre></td></tr></table></figure></p>
<ul>
<li>parseInt()和parseFloat()会尝试逐个解析字符串中的字符，直到遇到无法解析的那一个，就返回该字符之前的所有数字;</li>
<li>运算符 + ，只要字符串中含有无法解析的数字，就会返回NaN<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo109cqnwyj307r05vjrl.jpg" alt="对于&quot;10.2abc&quot;显示结果"></li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>js中的字符串是一串 Unicode字符 序列，准确说是一串 UTF-16 编码单元的序列，每一个编码单元由一个16位二进制数表示。每一个Unicode字符由一或两个编码单元表示。<br>如果想表示一个单独的字符，只需要使用长度为1的字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello&quot;.length; //5</span><br></pre></td></tr></table></figure></p>
<p>字符串也有methods(方法)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello&quot;.charAt(1); // e</span><br><span class="line">&quot;hello,world&quot;.replace(&quot;hello&quot;,&quot;goddbye&quot;); //&quot;goodbey,world&quot;</span><br><span class="line">&quot;hello&quot;.toUpperCase(); //HELLO</span><br></pre></td></tr></table></figure></p>
<h3 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h3><ul>
<li>null 表示空值，必须使用null关键字才能访问。</li>
<li>undefined 是 未定义 类型的对象，表示一个未初始化的值。一个未被赋值的变量就是undefined类型，undefined实际上是一个不允许修改的值。</li>
<li>boolean，根据需要js可以根据如下规则将变量转换成布尔类型<ul>
<li>0、NaN、空字符串(“”)、false、null、undefined   转换为false （ 六种 ）</li>
<li>其他所有值转换为true</li>
</ul>
</li>
</ul>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>js与其他语言的重要区别是 js中语句块 是没有 作用域的，只有函数有作用域。如果在复合语句中（例如if）使用var声明一个变量，那么他的作用域是整个函数(复合语句 在 函数中)。但是在es6中,let 和 const 关键字允许创建块作用域的变量</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>算术运算符+ - * / 和 %(求余)<br><code>+</code> 操作符还可以链接字符串（还有 字符串 转换 数字）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;hello&quot; + &quot;Angela&quot; ;// &quot;helloAngela&quot;</span><br></pre></td></tr></table></figure></p>
<p>如果你用一个字符串加上一个数字，那么操作数都会首先被转换为字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3 + &quot;2&quot;  //&quot;32&quot;</span><br><span class="line">&quot;3&quot; + 4 + 6 //&quot;346&quot;</span><br></pre></td></tr></table></figure></p>
<p><strong> 这里有咩有看出一个实用的技巧——通过空字符串相加，可以将某个变量迅速变成 字符串 类型 </strong><br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fo12pw0symj305n03qweg.jpg" alt=""></p>
<p>js的比较操作使用&lt;、&gt;、&lt;=、&gt;=,这些运算符对于数字和字符串都通用。<br>== 和 === ， != 和 !== ,区别是有咩有在比较前 进行 类型自适应（类型转换）</p>
<h3 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h3><ul>
<li>if else</li>
<li>for</li>
<li>while 和 do-while (循环体 至少执行一次)</li>
</ul>
<p>例如；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while(a)&#123;</span><br><span class="line">   a+=1; a为true，才会执行</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">do&#123;</span><br><span class="line"> a+=1;  //至少执行一次</span><br><span class="line">&#125;while(a&gt;0)</span><br></pre></td></tr></table></figure></p>
<p>&amp;&amp; 和 || 运算符使用 短路逻辑，是否会执行第二个语句取决于 第一个操作数的结果。在需要访问某个对象的属性时，可以使用这个特性先判断对象是对为空<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = Q &amp;&amp; Q.length</span><br></pre></td></tr></table></figure></p>
<p>或运算可以用来设置默认值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var name = otherName || &apos;default&apos;</span><br></pre></td></tr></table></figure></p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>js中的对象表现形式为”名——值”对，类似</p>
<ul>
<li>python中的字典</li>
<li>c/c++中的散列表</li>
<li>Perl 和 Ruby 中的散列（哈希）</li>
<li>Java 中的 HashMap</li>
<li>php中的关联数组</li>
</ul>
<p>正因为js中的一切（除了核心类型 core object）都是对象，所以js必然与大量的散列表查找操作有着千丝万缕的联系，而散列表擅长的就是告诉查找</p>
<p>有两种简单的方法可以创建一个对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Object();</span><br></pre></td></tr></table></figure></p>
<p>和<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br></pre></td></tr></table></figure></p>
<p>第二种更方便的方法叫做“对象字面量”，这也是json格式的核心语法，一般我们优先选择第二种。<br>下面的方法创建一个对象原型Person，和原型的对象实例you<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Person(name,age)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    thia.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//定义一个对象</span><br><span class="line"></span><br><span class="line">var you = new Person(&apos;you&apos;,&apos;20&apos;)</span><br></pre></td></tr></table></figure></p>
<p>创建完成后，对象的属性可以通过如下两种方式进行赋值和访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj.name = &apos;angela&apos;;</span><br><span class="line">var name = obj.name;</span><br></pre></td></tr></table></figure></p>
<p>第二种<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">obj[&apos;name&apos;] = &apos;angela&apos;;</span><br><span class="line">var name = obj[&apos;name&apos;];</span><br></pre></td></tr></table></figure></p>
<p>这两种方法在语义上是相同的，第二种方法的优点是，属性的名称被看做一个字符串，这意味着她可以在运行时被计算，缺点是<br>有可能在后期无法被解释器优化，他也可以被用来访问某些以 <code>预留关键字</code>作为名称的属性（注：es5开始， 预留关键字可以作为对象的属性名）</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是js中一种特殊的对象，他的工作原理与普通对象类似（以数字为属性名，但只能通过[]来访问），他还有一个特殊的属性 length，这个属性的值比最大索引数大1.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;&apos;a&apos;,&apos;b&apos;,&apos;c&apos;&#125;;  //数组字面量比 传统的声明数组更加方便</span><br><span class="line">a.length; // 3</span><br><span class="line"></span><br><span class="line">a[100] = &apos;x&apos;;</span><br><span class="line">a.length = 101;</span><br></pre></td></tr></table></figure></p>
<p><strong> 记住：数组的长度是比最大索引数 大 1 的数。</strong></p>
<p>如果试图访问一个不存在的索引，会得到 undefined;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeof(a[90]); //undefined</span><br></pre></td></tr></table></figure></p>
<p>可以通过如下的方式遍历一个数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(var i = 0; i &lt; a.length; i++)&#123;</span><br><span class="line">    xxxxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>遍历数组的另一种方法是使用 for…in循环，注意，如果有人向Array.prototype中添加了新的属性，使用for…in循环，这些属性也同样会被遍历。所以不推荐这种方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(var i in a)&#123;</span><br><span class="line">    xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>ES5增加了遍历数组的另一种方法，forEach();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[&apos;a&apos;,&apos;b&apos;&apos;c&apos;].forEach(function(currentValue,index,array)&#123;</span><br><span class="line">    // do something with currentValue or array[index]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;].forEach(currentValue =&gt; console.log(currentValue))</span><br></pre></td></tr></table></figure></p>
<p>如果想在数组后追加元素，只需要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.push(item);</span><br></pre></td></tr></table></figure></p>
<p>Array类 自带了许多方法。</p>
<ul>
<li>a.toString(); //返回一个包含数组中所有元素的字符串，每个元素通过逗号分隔</li>
<li>a.toLocaleString(); //根据宿主环境的区域设置，返回一个包含数组中所有元素的字符串，每个元素通过逗号分隔</li>
<li>a.concat(item1,item2,…,itemN); //连接，返回一个数组，包含了原先 a 和 item1,item2,…,itemN中的所有元素</li>
<li>a.join(sep); //返回一个包含数组中所有元素的字符串，每个元素通过指定的sep分隔</li>
<li>a.join(sep).splice(sep); //返回原数组</li>
<li>a.splice(start,delcount,item1,item2,…,itemN);//从start开始，删除delcount个元素。然后插入所有的item</li>
<li>a.slice(start,end);//返回子数组，以a[start]开头，以a[end]前一个元素结尾。</li>
<li>a.pop(); //删除并返回 数组中的最后一个元素</li>
<li>a.shift(); //删除并返回 数组中的第一个元素</li>
<li>a.unshift(item);//将item插入数组头部，并返回数组新长度(考虑undefined)</li>
<li>a.push(item1,item2); //将item1，item2追加至数组a末尾</li>
<li>a.reverse();//数组逆序</li>
<li>a.sort(cmpfn);//依据cmpfn返回的结果进行排序，如果为指定比较函数，则按字符顺序比较（即使元素是数字）</li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h4><p>apply()方法调用一个函数，其具有一个指定的this值，以及作为一个数组（或 类似数组的对象），提供的参数。<br><strong> call()方法与apply()方法类似，只有一个区别，就是call()方法接受的是若干个参数的列表，而apply()方法接受的是一个包含多个参数的数组</strong><br>语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.apply（thisArg,[argsArray]）</span><br></pre></td></tr></table></figure></p>
<p>参数<br>thisArg<br>    在fun函数运行时指定的this值。需要注意的是，指定的this值并不一定是该函数执行时真正this值，如果这个函数处于非严格模式下，则指定为null或undefined时会自动指向全局对象（浏览器中就是window对象），<br>    同时值为原始值（数字、字符串、布尔值）的this会指向该原始值的自动包装对象<br>argsArray<br>    一个数组或者类数组对象,其中的数组元素将作为单独的参数传给fun函数。如果该参数的值为null或undefined，则表示不需要传入任何参数</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fo5klzsuryj303903awf7.jpg" alt="单纯表情包"></p>
<h4 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function add(x, y)&#123;</span><br><span class="line">    var total = x + y;</span><br><span class="line">    return total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>return 语句返回一个值并结束函数。如果没有使用return函数语句，或者一个没有值的return语句，JavaScript会返回undefined。<br>函数实际上市访问了函数体中一个名为arguments的内部对象，这个对象就如同一个类似于数组的对象一样，包括了所有被传入的参数。让我们重写一下上面这个函数，使他可以接收任意个数的参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function add() &#123;</span><br><span class="line">    var sum = 0;</span><br><span class="line">    for(var i = 0, j = arguments.length; i &lt; j; i++)&#123;</span><br><span class="line">        sum += arguments[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line">add(2, 3, 4, 5);//14</span><br></pre></td></tr></table></figure></p>
<p>求平均数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function avg() &#123;</span><br><span class="line">    var sum = 0;</span><br><span class="line">    for(var i = 0,j = arguments.length.length; i &lt; j; i++)&#123;</span><br><span class="line">        sum += arguments[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return sum/arguments.length;</span><br><span class="line">&#125;</span><br><span class="line">avg(2,3,4,5); //3.5</span><br></pre></td></tr></table></figure></p>
<p>如果处理一个数组的平均值，js允许使用 任意函数对象的 apply() 方法来调用函数，并传递给他一个包含了参数的数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avg.apply(null,[2,3,4,5]); //3.5</span><br></pre></td></tr></table></figure></p>
<p>js允许以递归的方式调用函数。递归在处理树形结构时非常有用。</p>
<h3 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h3><p>在经典的面向对象的语言中，对象是指数据和在这些数据上进行的操作的集合，js是一种基于原型的编程语言，并没与class语句，而是把函数用作类。<br>我们来定义一个人名对象，名（first） 姓（last）；姓（last）名(first)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function makePerson(first,last)&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        first: first,</span><br><span class="line">        last: last,</span><br><span class="line">            fullName: function()&#123;</span><br><span class="line">        return this.first + &apos; &apos; + this.last; </span><br><span class="line">    &#125;,</span><br><span class="line">    fullNameReversed: function()&#123;</span><br><span class="line">        return this.lasr + &apos; &apos; + this.first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">s = makePerson(&apos;Angela&apos;,&apos;Ma&apos;);</span><br><span class="line">s.fullName(); //Angela ma</span><br><span class="line">s.fullNameReversed(); Ma Angela</span><br></pre></td></tr></table></figure></p>
<p>上面的代码中用到了关键字<a href="">this</a>,当在函数中使用时，this指代当前的对象，也就是调用了函数的对象。<br>如果在一个对象上使用 点或者方括号 来访问属性或者方法，这个对象就成了this。<br>如果并没有使用”点”运算符调用某个对象，那么this将指向全局对象。这是一个经常出错的地方。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = makePerson(&apos;Angela&apos;,&apos;Ma&apos;);</span><br><span class="line">var fullName = s.fullName();</span><br><span class="line">fullName(); //undefined undefined</span><br><span class="line">fullName(&apos;Angela&apos;,&apos;Ma&apos;);// undefined undefined</span><br></pre></td></tr></table></figure></p>
<p>当我们调用 fullName() 时，this实际上是指向全局对象的，并没有名为first或last的全局变量，所以他们两个的返回值都是 unfined.</p>
<p>下面使用关键字this改进已有的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function Person(first,last) &#123;</span><br><span class="line">    this.first = first;</span><br><span class="line">    this.last = last;</span><br><span class="line">    this.fullName = function() &#123;</span><br><span class="line">        return this.first + &apos; &apos; + this.last;</span><br><span class="line">    &#125;</span><br><span class="line">    this.fullNameReversed = function() &#123;</span><br><span class="line">        return this.last + &apos; &apos; + this.first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var s = new Person(&apos;Angela&apos;,&apos;Ma&apos;);</span><br></pre></td></tr></table></figure></p>
<p>我们引入了另外一个关键字:new,他和 this 密切相关。他的作用是创建一个崭新的空对象，然后使用指向那个对象的 this 调用特定的函数。<br>注意，含有 this 的特定函数不会返回任何值，只会修改 this 对象本身。 new 关键字将生成的 this 对象返回给调用方，而被 new 调用的函数成为构造函数。</p>
<p>这个改进有相同的问题，单独调用 fullName() 还是undefined</p>
<p>虽然我们的perSon已经相当完善了，但是还有可以改进的地方么？当然，每次我们创建一个Person 对象的时候，我们都在其中创建了两个新的函数对象，如果这个代码可以共享不是更好么</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function Person(first, last)&#123;</span><br><span class="line">    this.first = first;</span><br><span class="line">    this.last = last;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.fullName = function() &#123;</span><br><span class="line">    return this.first + &apos; &apos; + this.last;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.fullNameReversed = function() &#123;</span><br><span class="line">    return this.last + &apos; &apos; this.first;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Person.protoType 是一个可以被 Person 的所有实例共享的对象。他是一个名叫原型链的查询链的一部分：当你试图访问一个 Person 没有定义的属性时，解释器会首先检查这个 Person.prototype 来判断是都存在这样一个属性。<br>所以，任何分配给 Person.prototype 的东西 对 通过this对象构造的实例 都是可用的。</p>
<p>这个特性功能十分强大，js允许你在程序中的任何时候修改原型中的一些东西，也就是说你可以在运行时给已存在的对象添加额外的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = new Person(&quot;Angela&quot;, &quot;Ma&quot;);</span><br><span class="line">s.firstNameCaps();  // TypeError on line 1: s.firstNameCaps is not a function</span><br><span class="line"></span><br><span class="line">Person.prototype.firstNameCaps = function() &#123;</span><br><span class="line">    return this.first.toUpperCase()</span><br><span class="line">&#125;</span><br><span class="line">s.firstNameCaps(); //</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fo5uo6w5iej303z045dfw.jpg" alt=""></p>
<p>有趣的是，还可以给js的内置函数原型添加东西，让我们给 String 添加一个方法用来返回逆序的字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var s = &apos;Angela&apos;;</span><br><span class="line">s.reversed(); // TypeError on line 1: s.reversed is not a function</span><br><span class="line"></span><br><span class="line">String.prototype.reversed = function() &#123;</span><br><span class="line">    var r = &quot;&quot;;</span><br><span class="line">    for(var i = this.length; i &gt;= 0; i--)&#123;</span><br><span class="line">        r += this[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br><span class="line">s.reversed(); //alegnA</span><br></pre></td></tr></table></figure></p>
<p>定义新方法也可以在字符串字面量上用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;This can now be reversed&quot;.reversed(); // desrever eb won nac sihT</span><br></pre></td></tr></table></figure></p>
<p>正如我前面提到的，原型组成链的一部分。那条链的根节点是 Object.prototype，它包括 toString() 方法——将对象转换成字符串时调用的方法。这对于调试我们的 Person 对象很有用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var s = new Person(&quot;Simon&quot;, &quot;Willison&quot;);</span><br><span class="line">s; // [object Object]</span><br><span class="line"></span><br><span class="line">Person.prototype.toString = function() &#123;</span><br><span class="line">    return &apos;&lt;Person: &apos; + this.fullName() + &apos;&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">s.toString(); // &lt;Person: Simon Willison&gt;</span><br></pre></td></tr></table></figure>
<p>你是否还记得之前我们说的 avg.apply() 中的第一个参数 null？现在我们可以回头看看这个东西了。apply() 的第一个参数应该是一个被当作 this 来看待的对象。下面是一个 new 方法的简单实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function trivialNew(constroctor,...args) &#123;</span><br><span class="line">    var o = &#123;&#125;;</span><br><span class="line">    constroctor.apply(o,args);</span><br><span class="line">    return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这并不是 new 的完整实现，因为它没有创建原型（prototype）链。想举例说明 new 的实现有些困难，因为你不会经常用到这个，但是适当了解一下还是很有用的。在这一小段代码里，…args（包括省略号）叫作剩余参数（rest arguments）。如名所示，这个东西包含了剩下的参数。因此调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var bill = trivialNew(Person,&quot;Angela&quot;,&quot;Ma&quot;);</span><br></pre></td></tr></table></figure></p>
<p>可以认为和下面语句是等效的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var bill = new Person(&quot;Angela&quot;,&quot;Ma&quot;);</span><br></pre></td></tr></table></figure></p>
<p>apply() 有一个姐妹函数，名叫 call，它也可以允许你设置 this，但它带有一个扩展的参数列表而不是一个数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function lastNameCaps() &#123;</span><br><span class="line">    return this.last.toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line">var s = new Person(&quot;Simon&quot;, &quot;Willison&quot;);</span><br><span class="line">lastNameCaps.call(s);</span><br><span class="line">// 和以下方式等价</span><br><span class="line">s.lastNameCaps = lastNameCaps;</span><br><span class="line">s.lastNameCaps();</span><br></pre></td></tr></table></figure>
<h3 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h3><p>js允许在一个函数内部定义函数，一个很重要的细节是他们可以访问父函数作用域中的变量:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function betterExampleNeeded() &#123;</span><br><span class="line">    var a = 1;</span><br><span class="line">    function oneMoewThanA() &#123;</span><br><span class="line">        return a + 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return onMoreThanA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这也是一个减少使用全局变量的好方法。<br>内部函数可以共享父函数的变量，所以可以使用这个特性把一些函数捆绑在一起，这可以有效的防止”污染”全局命名空间——可以称为“局部全局”。</p>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function makeAdder(a) &#123;</span><br><span class="line">    return function(b) &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var x = makeAdder(5);</span><br><span class="line">var y = makeAdder(20);</span><br><span class="line">x(6); //11</span><br><span class="line">y(7); //27</span><br></pre></td></tr></table></figure>
<p>makeAdder 函数 ：创建了一个新的Adder函数，这个函数自身带有一个参数，他被调用的时候这个参数会被加在外层函数传进来的参数上。</p>
<p>这与内嵌函数十分相似：</p>
<ul>
<li>一个函数被定义在另一个函数内部，内部函数可以访问外部函数的变量</li>
<li>唯一不同的是，外部函数被返回了，常识告诉我们局部变量“应该”不存在了，但是仍然存在，否则adder函数将不能工作</li>
</ul>
<p>到底发生了什么？<br>每当js执行一个函数时候，都会创建一个作用域对象，用来保存在这个函数中创建的局部变量。他和被传入函数的变量一起被初始化。<br>这与全局对象和函数的全局对象类似，但仍有一些很重要的区别。</p>
<ul>
<li>第一、每次函数被执行的时候，都会创建一个 新的、特定的  作用域对象；</li>
<li>第二、与全局对象不同的是，不能直接从js代码中直接访问作用域对象，也没有可以遍历当前作用域对象里面属性的方法</li>
</ul>
<p>所以当调用makeAdder时，解释器创建了一个作用域对象，它带有一个属性: a,这个属性 被当做参数传入makeAdder函数。然后makeAdder返回一个新创建的函数。<br>通常js的垃圾回收器会在这时回收 makeAdder 创建的作用域对象，但是 返回的函数 却保留了一个指向那个 作用域对象的引用。 结果是这个作用域对象不会被垃圾回收器回收，<br>直到指向 makeAdder 返回的那个 函数对象的引用 计数为零。 </p>
<p>作用域对象组成了一个名为 作用域链 的链。它类似于原型链一样，被js的对象系统使用。</p>
<p>一个闭包 就是一个函数 和 被创建的函数中的作用域对象 的组合。</p>
<h4 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h4><p>使用闭包的一个坏处是，在IE浏览器中它容易导致 内存泄漏。js是一种具有垃圾回收机制的语言——对象再被创建的时候 分配内存，然后当指向这个对象的引用计数为零时，浏览器会回收内存。宿主环境提供的对象都是按照这种方法被处理的。</p>
<p>浏览器需要处理大量的对象来描绘一个正在被展现的html页面——DOM对象。浏览器负责管理他们的内存分配和回收。</p>
<p>IE浏览器有自己的一套垃圾回收机制，这套机制与js提供的垃圾回收机制进行交互的时候，可能会发生内存泄漏。</p>
<p>在IE中，每当一个js对象 和 一个本地对象 之间形成循环引用时，就会发生内存泄漏。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// bad  </span><br><span class="line">function leakMemory() &#123;</span><br><span class="line">    var el = document.getElementById(&apos;el&apos;);</span><br><span class="line">    var o = &#123;&apos;el&apos;:el&#125;;</span><br><span class="line">    el.o = o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这段代码的循环引用会导致内存泄漏：IE 不会释放被 el 和 o 使用的内存，直到浏览器被彻底关闭并重启后。</p>
<p>一般也很少发生如此明显的内存泄漏现象——通常泄漏的数据结构有多层的引用，往往掩盖了循环引用的情况。</p>
<p>闭包很容易发生 无意识的内存泄漏。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function addHandler() &#123;</span><br><span class="line">    var el = document.getElementById(&apos;el&apos;);</span><br><span class="line">    el.onclick = function() &#123;</span><br><span class="line">        el.style.backgroundColor = &apos;red&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这段代码创建了一个元素，当他被点击的时候变红，但同时也发生了内存泄漏。<br>为什么？<br>因为对 el 的引用不小心 放在一个匿名内部函数中。这就在js对象（内部函数） 和 本地对象（el）之间创建了一个循环引用。</p>
<p>这个问题有很多种解决办法，最简单的一种就是不要使用 el 变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function addHandler() &#123;</span><br><span class="line">    document.getElementById(&apos;el&apos;).onclick = function() &#123;</span><br><span class="line">        this.style.backgroundColor = &apos;red&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>另外一种避免闭包的好方法就是在 windows.onunload 事件发生期间破坏 循环引用。许多事件库都能完成这项工作。注意这样做将使 Firefox 中 的becache 无法工作。<br>所以除非有其他必要的原因，最好不要在Firefox中注册一个 onunload 的监听器。</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react浅析]]></title>
      <url>/2018/01/28/react%E6%B5%85%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Change is the only proof of life. —— Evelyn Waugh 《Brideshead Revisited》</p>
</blockquote>
<p>所有在JSX中声明的函数，都会被委托在最顶层的document节点上，并用组件名和事件名来存储回调函数，<br>每次当某个组件触发事件时，在document上绑定的监听函数就会找到这个组件和他所有的父组件，<br>对每个组件创建对应的react合成事件，并批处理，从而根据事件名和组件名调用回调函数</p>
<h4 id="关于setState"><a href="#关于setState" class="headerlink" title="关于setState"></a>关于setState</h4><ul>
<li>原理：在执行this.setState()时，react并没有急着立即更新state，而是把新的state存到一个队列中。对传进去的对象进行合并，然后在统一处理，触发重新渲染过程。</li>
<li>setState()并不会立即改变this.state,而是创建一个即将处理的state。setState()并不一定是同步的。为了提升性能React会批量执行state()和DOM渲染</li>
<li>setState()总是会触发一次组件重绘，除非在showComponentUpdate()中实现了一些条件条件渲染逻辑</li>
<li>把setState()看做是重新render的一次请求而不是立即更新组件的指令</li>
</ul>
<a id="more"></a>
<p>Q:调用this.setState()后什么时候this.state才会更新？<br>A:即将要执行下一次的render函数时</p>
<h4 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h4><p>为了更清楚明了的查看组件的生命周期，在每一个生命周期中添加改生命周期的名称<br>发现<br>初次调用时 </p>
<ul>
<li>father was created</li>
<li>father componentWillMount</li>
<li>render father</li>
<li>child was created</li>
<li>child compoentWillMount</li>
<li>render Child</li>
<li>Child componentDidMount</li>
<li>Father componentWillUnmount</li>
</ul>
<p>调用父组件的setState后</p>
<ul>
<li>Father shouldCompoentUpdate</li>
<li>Father compoentWillpdate</li>
<li>Father render</li>
<li>Child componentWillReceiveProps</li>
<li>Child shouldComponentUpdate</li>
<li>Child componentWillUpdate</li>
<li>render Child </li>
<li>Child ComponentDidUpdate</li>
<li>Father CompoentDidUpdate</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">class Child extends React.Component &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super()</span><br><span class="line">    console.log(&apos;Child was created!&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillMount()&#123;</span><br><span class="line">    console.log(&apos;Child componentWillMount!&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    console.log(&apos;Child componentDidMount!&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillReceiveProps(nextProps)&#123;</span><br><span class="line">    console.log(&apos;Child componentWillReceiveProps:&apos;+nextProps.data )</span><br><span class="line">  &#125;</span><br><span class="line">  shouldComponentUpdate(nextProps, nextState)&#123;</span><br><span class="line">    console.log(&apos;Child shouldComponentUpdate:&apos;+ nextProps.data)</span><br><span class="line">    return true</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUpdate(nextProps, nextState)&#123;</span><br><span class="line">    console.log(&apos;Child componentWillUpdate:&apos;+ nextProps.data)</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidUpdate()&#123;</span><br><span class="line">    console.log(&apos;Child componentDidUpdate&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(&apos;render Child!&apos;)</span><br><span class="line">    return (      </span><br><span class="line">      &lt;h1&gt;Child recieve props: &#123;this.props.data&#125;&lt;/h1&gt;      </span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Father extends React.Component &#123;</span><br><span class="line">  // ... 前面跟子组件一样</span><br><span class="line">  handleChangeState()&#123;</span><br><span class="line">    this.setState(&#123;randomData: Math.floor(Math.random()*50)&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    console.log(&apos;render Father!&apos;)</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Child data=&#123;this.state.randomData&#125; /&gt;</span><br><span class="line">        &lt;h1&gt;Father State: &#123; this.state.randomData&#125;&lt;/h1&gt;      </span><br><span class="line">        &lt;button onClick=&#123;this.handleChangeState&#125;&gt;切换状态&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">React.render(</span><br><span class="line">  &lt;Father /&gt;,</span><br><span class="line">  document.getElementById(&apos;root&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fnxb3le7zxj317218ck3n.jpg" alt="react时间周期"></p>
<p><a href="https://www.jianshu.com/p/12daf3731f9e" target="_blank" rel="noopener">组件生命周期 参考</a></p>
]]></content>
      
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-router温故知新]]></title>
      <url>/2018/01/23/react-router%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>谁等待了足够的时间，谁就将永远等待下去，超过了某一个期限，就什么也不会发生了。 —— 塞缪尔·贝克特 《马龙之死》</p>
</blockquote>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>Router组件本身只是一个容器，真正的路由要通过Route组件定义。Route组件定义了URL路径与组件的对应关系。</p>
<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>注释：导航栏 应该在每一个屏幕中都有，如果没有react router，我们将把ul封装为一个组件，比如Nav，然后将 Nav 渲染近每一个屏幕；<br>但是随着项目的复杂度的增加，会使得项目代码冗余，react-router提供了另外一种方式和嵌套路由共享UI<br><a id="more"></a><br>React Router embraces this by letting you nest your routes, which automatically becomes nested UI.通过让你嵌套路由，自然形成嵌套的UI<br>The best way to build large things is to stitch small things together.<br>这才是react-router的真正威力，每一条route都可以作为一个独立的应用程序来开发</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fnpgxgeei8j31kw0c7400.jpg" alt=" 04 嵌套"></p>
<h3 id="Active-Links"><a href="#Active-Links" class="headerlink" title="Active Links"></a>Active Links</h3><p>Link 不同于 a 标签的一个原因是，Link 可以区别这个链接是否是被激活的(active)，以便于开发者标记不同的样式。行内样式 或者 className都是支持的,并且parent routes are active when child routes are active</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// modules/App.js</span><br><span class="line">&lt;li&gt;&lt;Link to=&quot;/about&quot; activeStyle=&#123;&#123; color: &apos;red&apos; &#125;&#125;&gt;About&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;Link to=&quot;/repos&quot; activeStyle=&#123;&#123; color: &apos;red&apos; &#125;&#125;&gt;Repos&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">// modules/App.js</span><br><span class="line">&lt;li&gt;&lt;Link to=&quot;/about&quot; activeClassName=&quot;active&quot;&gt;About&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;Link to=&quot;/repos&quot; activeClassName=&quot;active&quot;&gt;Repos&lt;/Link&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fnqk2eci62j31bi0g440h.jpg" alt="active styles"></p>
<p>如果将每一个有激活样式的Link都写上样式，会产生很多冗余代码，所以我们可以把有激活样式的Link封装一下,在需要使用的时候 引用 封装后的NavLink<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// moudle/NavLink.js</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;Link&#125; from &apos;react-router&apos;;</span><br><span class="line">export default class NavLink extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;Link &#123;...this.props&#125; activeStyle = &#123;&#123;color:&apos;red&apos;&#125;&#125;&gt;&lt;/Link&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// moudle/App.js</span><br><span class="line"></span><br><span class="line">&lt;li&gt;&lt;NavLink to=&quot;/about&quot; &gt;About&lt;/NavLink&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;NavLink to=&quot;/repos&quot; &gt;Repos&lt;/NavLink&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="URL-Params"><a href="#URL-Params" class="headerlink" title="URL Params"></a>URL Params</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/repos/reactjs/react-rpute</span><br></pre></td></tr></table></figure>
<p>These URLs would match a route path like this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/repos/:userName/:repoName</span><br></pre></td></tr></table></figure>
<p>URL中用 ： 开头的参数的值，可以在组件中用 this.props.params[name]取到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// repo.js</span><br><span class="line">render()&#123;</span><br><span class="line">    return(</span><br><span class="line">        &lt;div &gt;&#123;this.props.params.repoName&#125;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line">&lt;Route path=&quot;/&quot;&gt;</span><br><span class="line">    &lt;Route path=&quot;/repo/:about/:URLparams&quot; component=&#123;Repo&#125;&gt;&lt;/Route&gt;</span><br><span class="line">&lt;/Route&gt;</span><br></pre></td></tr></table></figure>
<p>引用repo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// about.js</span><br><span class="line">&lt;Link to=&quot;/repo/About/URLParams&quot;&gt;点击链接repo.js&lt;/Link&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="Index-Routes"><a href="#Index-Routes" class="headerlink" title="Index Routes"></a>Index Routes</h3><p>当我们访问’/‘时，发现这只是一个导航并且显示一张空包的页面，所以我们可以设置一个默认页面，当App中没有子组件的时候，渲染Home<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Home.js</span><br><span class="line">import React from &apos;react&apos;</span><br><span class="line"></span><br><span class="line">export default React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div&gt;Home&lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// modules/App.js</span><br><span class="line">import Home from &apos;./Home&apos;</span><br><span class="line"></span><br><span class="line">// ...</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;/* ... */&#125;</span><br><span class="line">  &#123;this.props.children || &lt;Home/&gt;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">//...</span><br></pre></td></tr></table></figure>
<p>虽然这样也可以运行的很好，但是我们想做的是小apps内构件小app，而不是大的应用程序，所以我们要把Home链接到Route中，像APP和About一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line">// new imports:</span><br><span class="line">// add `IndexRoute` to &apos;react-router&apos; imports</span><br><span class="line">import &#123; Router, Route, hashHistory, IndexRoute &#125; from &apos;react-router&apos;</span><br><span class="line">// and the Home component</span><br><span class="line">import Home from &apos;./modules/Home&apos;</span><br><span class="line"></span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">render((</span><br><span class="line">  &lt;Router history=&#123;hashHistory&#125;&gt;</span><br><span class="line">    &lt;Route path=&quot;/&quot; component=&#123;App&#125;&gt;</span><br><span class="line"></span><br><span class="line">      &#123;/* add it here, as a child of `/` */&#125;</span><br><span class="line">      &lt;IndexRoute component=&#123;Home&#125;/&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Route path=&quot;/repos&quot; component=&#123;Repos&#125;&gt;</span><br><span class="line">        &lt;Route path=&quot;/repos/:userName/:repoName&quot; component=&#123;Repo&#125;/&gt;</span><br><span class="line">      &lt;/Route&gt;</span><br><span class="line">      &lt;Route path=&quot;/about&quot; component=&#123;About&#125;/&gt;</span><br><span class="line">    &lt;/Route&gt;</span><br><span class="line">  &lt;/Router&gt;</span><br><span class="line">), document.getElementById(&apos;app&apos;))</span><br></pre></td></tr></table></figure></p>
<h3 id="Index-Links"><a href="#Index-Links" class="headerlink" title="Index Links"></a>Index Links</h3><p>“如果子组件是active状态的，那么父组件一定也是active状态”，‘/’是所有路由的父导航，所以Home一直都是active状态<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fnrsyomk4lj30n80iqq46.jpg" alt="Home会一直active状态"><br>有两种方法可以让router知道点击的是‘index route’,然后只渲染index route</p>
<h4 id="IndexLink"><a href="#IndexLink" class="headerlink" title="IndexLink"></a>IndexLink</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// App.js</span><br><span class="line">import &#123; IndexLink &#125; from &apos;react-router&apos;</span><br><span class="line"></span><br><span class="line">// ...</span><br><span class="line">&lt;li&gt;&lt;IndexLink to=&quot;/&quot; activeClassName=&quot;active&quot;&gt;Home&lt;/IndexLink&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<h4 id="onlyActiveOnIndex"><a href="#onlyActiveOnIndex" class="headerlink" title="onlyActiveOnIndex"></a>onlyActiveOnIndex</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;Link to=&quot;/&quot; activeClassName=&quot;active&quot; onlyActiveOnIndex=&#123;true&#125;&gt;Home&lt;/Link&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>
<p>这样我们要一直记得 activeClassName的类名，因为我们已经抽象出NavLink，而且 记住 我们已经把NavLink 的所有方法，通过{…props}都传递给了Link。<br>所以，我们可以简化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;NavLink to=&quot;/&quot; onlyActiveOnIndex=&#123;true&#125;&gt;Home&lt;/NavLink&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fnru80jivrj30n00j8dh3.jpg" alt="Home只在选中时才激活"></p>
<h3 id="Clean-Urls"><a href="#Clean-Urls" class="headerlink" title="Clean Urls"></a>Clean Urls</h3><p>Modern browsers let JavaScript manipulate the URL without making an http request, so we don’t need to rely on the hash (#) portion of the url to do routing, but there’s a catch (we’ll get to it later).<br>译：现代浏览器允许js在不触发http请求的时候操作url，所以我们不需要依赖url的哈希部分来进行路由</p>
<h4 id="Configuring-Your-Server"><a href="#Configuring-Your-Server" class="headerlink" title="Configuring Your Server"></a>Configuring Your Server</h4><p>当切换hashHistory成BrowserHistory之后，发现url中那些 hash 都不见了，url变得很干净，但是有一个问题当刷新页面的时候，就找不到页面了<br>因为无论什么url进来，你的服务器都需要传送给你的应用程序，但是因为应用程序操作了url。所以我们当前的浏览器不知道如何处理这个url。</p>
<ul>
<li><p>步骤一：–history-api-fallback<br>Webpack Dev Server 有一个选项可以解决这个问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line"></span><br><span class="line">&quot;start&quot;: &quot;webpack-dev-server --inline --content-base . --history-api-fallback&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>步骤二：在index.html中，把相对路径 改为 绝对路径</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- index.html --&gt;</span><br><span class="line">&lt;!-- index.css -&gt; /index.css --&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/index.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- bundle.js -&gt; /bundle.js --&gt;</span><br><span class="line">&lt;script src=&quot;/bundle.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>如果服务器在运行中，请关掉重新npm start一下，因为改动了index.html不会热加载。</p>
<p>#####发现的问题</p>
<p>BrowserHistory 和 HashHistory 的区别</p>
<p>since server rendering is synchronous and route matching is asynchronous.同步和异步</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react-router </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器的工作原理]]></title>
      <url>/2018/01/16/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 人的尊严就在于，能够对我们看似前后矛盾的命运逻辑，反复的质疑。—— 英格玛·伯格曼《第七封印》</p>
</blockquote>
<h4 id="浏览器的主要功能"><a href="#浏览器的主要功能" class="headerlink" title="浏览器的主要功能"></a>浏览器的主要功能</h4><ul>
<li>浏览器的主要功能是将用户选择的web资源呈现出来，需要从数据库请求资源，并将其显示在浏览器窗口中，资源的格式通常是html，也包括PDF、image以及其他格式。用户用URL（Uniform Resource Identifier统一资源标识符）来指定请求资源的位置</li>
<li>HTML和CSS规范中规定了浏览器解释html文档的方式，由 W3C组织对这些规范进行维护，W3C是负责制定web标准的组织。</li>
</ul>
<a id="more"></a>
<ul>
<li>虽然各大浏览器厂商纷纷开发自己的扩展，遵循的规则并不完善，为web开发者带来严重的兼容性问题，但是浏览器的用户界面差不多，常见的用户界面<ul>
<li>用来输入URL的地址栏</li>
<li>前进、后退按钮</li>
<li>书签选项</li>
<li>用于刷新、暂停当前加载文档的刷新、暂停按钮</li>
<li>用于到达主页的主页按钮</li>
</ul>
</li>
</ul>
<h4 id="浏览器的主要构成"><a href="#浏览器的主要构成" class="headerlink" title="浏览器的主要构成"></a>浏览器的主要构成</h4><ul>
<li>用户界面——包括 地址栏、前进后退按钮、书签目录、（所看到的除了用来显示你所请求的页面的主窗口之外的部分）</li>
<li>浏览器引擎——用来查询以操作渲染引擎的接口</li>
<li>渲染引擎——显示请求的内容，例如如果请求的html，他负责解析html及css，并将解析后的结果显示出来</li>
<li>网络——用来完成网络调用，例如http请求，它是平台无关的接口</li>
<li>UI后端——用来绘制类似组合选择框和对话框等基本组件，具有不特定于某个平台的通用接口，底层使用操作系统的用户接口</li>
<li>JS解释器——用来解释执行js代码</li>
<li>数据存储——属于持久层，浏览器需要在硬盘中保存类似cookie的各种数据</li>
</ul>
<h4 id="主流程"><a href="#主流程" class="headerlink" title="主流程"></a>主流程</h4><p>渲染引擎在取得内容之后的基本流程：<br>解析html以构建dom树——&gt;构件render树——&gt;布局render树——&gt;绘制render树</p>
<ul>
<li>解析 渲染引擎首先解析html，并将标签转化为内容树中的dom节点</li>
<li>解析外部css文件以及style标签中的样式信息。</li>
<li>这些样式信息以及html中的可见性指令用来构建render树</li>
<li>render树构建好了之后，将会执行布局过程，确定每个节点在屏幕上的确切坐标</li>
<li>绘制 即遍历render树，并使用UI后端层绘制每个节点</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 浏览器 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[箭头函数]]></title>
      <url>/2018/01/02/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>箭头函数表达式的语法比函数表达式更短，并且不绑定自己的this，arguments，super或 new.target。这些函数表达式最适合用于非方法函数，并且它们不能用作构造函数。</p>
</blockquote>
<h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(param1,param2,...,paramN)=&gt;&#123;retrun expression&#125;</span><br><span class="line">//只有一个参数时，括号可以选择不加</span><br><span class="line">（singleParam）=&gt;&#123;statements&#125;</span><br><span class="line"> singleParam=&gt;&#123;statements&#125;</span><br><span class="line">//当没有参数时，括号是必须的</span><br><span class="line">（）=&gt;&#123;statements&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//加括号的函数体返回对象字面表达式：</span><br><span class="line">param =&gt; (&#123;foo: bar&#125;)</span><br><span class="line"></span><br><span class="line">//支持剩余参数和默认参数</span><br><span class="line">(参数1, 参数2, ...rest) =&gt; &#123;函数声明&#125;</span><br><span class="line">(参数1 = 默认值1,参数2, …, 参数N = 默认值N) =&gt; &#123;函数声明&#125;</span><br><span class="line"></span><br><span class="line">//同样支持参数列表解构</span><br><span class="line">let f = ([a, b] = [1, 2], &#123;x: c&#125; = &#123;x: a + b&#125;) =&gt; a + b + c;</span><br><span class="line">f();  // 6</span><br></pre></td></tr></table></figure>
<h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>引入箭头函数的作用：更简短的函数并且不绑定this</p>
<ul>
<li>更短的函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var materials = [</span><br><span class="line"> &apos;Hydrogen&apos;,</span><br><span class="line">  &apos;Helium&apos;,</span><br><span class="line">  &apos;Lithium&apos;</span><br><span class="line">  ];</span><br><span class="line">  materials.map(function(materials)&#123;</span><br><span class="line">      return materials.lemght</span><br><span class="line">  &#125;); //[8,6,7]</span><br><span class="line">  materials.map(maters=&gt;&#123;</span><br><span class="line">      return materials.length</span><br><span class="line">  &#125;); //[8,6,7]</span><br><span class="line">  materials.map(masters=&gt;materials.length);</span><br><span class="line">  // [8,6,7]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>注：{}里表达式，需要 return,才会有返回值</p>
<ul>
<li>不绑定this<br>在箭头函数出现之前，每一个新创建的函数都有自己的this（在构造函数中是一个新对象，在严格模式的函数调用中是undefined，如果该函数被称为‘对象方法’则是基础对象）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git用法小结]]></title>
      <url>/2018/01/01/git%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 在一个日益麻木不仁的世界上，我们的知觉都已生了硬痂。—— 罗伯特·詹姆斯·沃勒 《廊桥遗梦》</p>
</blockquote>
<h4 id="第4章-通过实际操作学习git"><a href="#第4章-通过实际操作学习git" class="headerlink" title="第4章 通过实际操作学习git"></a>第4章 通过实际操作学习git</h4><h5 id="4-1-git基本操作"><a href="#4-1-git基本操作" class="headerlink" title="4.1 git基本操作"></a>4.1 git基本操作</h5><ol>
<li><code>git init</code>— 初始化仓库<br>生成  .git   文件夹，这个 .git 目录里管理着当前目录内容所需的仓库数据，在Git中，我们将这个目录的内容成为“附属于该仓库的工作树”。</li>
<li><code>git status</code>— 查看仓库的状态</li>
<li><code>mkdir  abc</code>  创建文件夹abc</li>
<li><code>touch abc.html</code>  创建文件 abc.html</li>
</ol>
<a id="more"></a>
<ol>
<li><code>git log</code> — 查看提交日志<br>(1) 只显示指定目录、文件的日志 <code>$ git log README.md</code><br>(2)显示文件的具体改动内容 <code>$ git log -p</code></li>
</ol>
<ul>
<li><code>git diff</code>查看工作树和暂存区的区别<br>不妨养成在<code>$ git commit</code>之前，<code>$ git diff HEAD</code>,查看本次提交和上次提交有什么区别<br><em><code>HEAD</code>是指针，指向当前分支的最新一次提交</em></li>
</ul>
<hr>
<h5 id="4-2分支的操作"><a href="#4-2分支的操作" class="headerlink" title="4.2分支的操作"></a>4.2分支的操作</h5><ol>
<li><code>git branch</code>— 显示分支一览表</li>
<li><code>$ git checkout -b</code> 创建、切换分支<br>如果你想以当前的master分支为基础创建新的分支，我们需要用到<code>$git checkout -b</code><br>(1)创建 feature-A 分支，并进行提交<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-A    //创建分支 feature-A</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>等同于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch feature-A //创建分支</span><br><span class="line">$ git checkout feature-A //切换到分支</span><br></pre></td></tr></table></figure></p>
<p>(2)切换到 master 分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git checkout master   //checkout 查看</span><br></pre></td></tr></table></figure></p>
<p><code>git checkout -</code>  ‘-‘ 连字符表示切换回上一个分支</p>
<ul>
<li><code>git merge</code> — 合并分支<br>假设<code>feature-A</code> 这个特性分支开发完毕，想要将他合并到主干分支<code>master</code>中。<br>(1)首先切换到 <code>master</code> 分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git checkout master</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>(2)然后合并分支， 为了历史记录，需要创建合并提交，因此在合并时加上 <code>--no-ff</code>参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff feature-A</span><br></pre></td></tr></table></figure></p>
<p><strong> 咳咳咳！！！！敲黑板，这个时候会进入 vim 编辑器状态，想当时我折腾了半天不知道那是个啥</strong><br>随后编辑器会启动，用于录入和并提交的信息<br>，默认信息中已经包含了是从分支合并过来的相关内容，所以保存就好了，然后关闭编辑器<br>先退出输出状态 Esc，然后进入输入状态 shift + ：，最后输入 wq！（保存并退出）<br><a href="http://www.cnblogs.com/yangjig/p/6014198.html" target="_blank" rel="noopener">vim命令总结</a><br>(3)成功的话，就会看到</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-977574ac299ec495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="合并成功返回"></p>
<p>4.. <code>git log --graph</code> — 以图标的形式查看分支<br>此时此刻很有成就感，成功新建了一个分支，并且合并啦</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-cd592f80866d3961.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="历史记录图表.png"></p>
<hr>
<h5 id="4-3-更改提交的操作"><a href="#4-3-更改提交的操作" class="headerlink" title="4.3 更改提交的操作"></a>4.3 更改提交的操作</h5><ol>
<li><code>git reset</code> — 回溯历史版本<br>如果此时我想创建一个feature-A 的兄弟分支，feature-B，怎么办呢？<br>那就需要回溯到创建A的分支之前的节点，创建一个B分支，<br>（1）要让仓库的HEAD、暂存区、当前工作树回溯到制定状态，需要用到<code>git reset --hard</code>命令，只需要提供目标时间点的哈希值，就可以完全恢复至改时间点的状态。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-8e305127ef2e245b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>（2）此时已经恢复到了创建分支A之前的节点，创建分支B<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-B</span><br></pre></td></tr></table></figure></p>
<p>随便写点什么，并且提交，一定要提交哦，也就是<code>git add</code> 、<code>git commit</code>，不然没有记录，如果自己不小心把代码搞丢了，是找不到的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-0c3b4ea093ba6e47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="现在的状态.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-3de311deb73797ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="我的目标状态.png"><br>（3）分支培育好了，要合并了<br> ———推进至A分支合并后的状态<br><code>git log</code> 命令只能查看以当前状态为终点的历史日志，所以这里要使用 <code>git reflog</code>命令，查看当前仓库的操作日志 ，寻找此时的哈希值，然后<code>git reset --hard</code>,之后合并<br>2.<code>git rebase -i</code>——压缩历史<br>在合并特性分支之前，如果发现已提交的内容中有些许拼写错误，这可以合并到上一个提交压缩成一个历史记录，来保证历史记录的高效性、正确性。<br>（1）创建分支C<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b ccc</span><br></pre></td></tr></table></figure></p>
<p>（2）对文件进行修改（并预留错误），并提交<br>很小的更改可以直接一次性<code>git commit -am&quot;information&quot;</code>，不需要<code>git add</code>， <code>git commit</code><br>（3）修正代码中错误<br>查看一下当前工作区和暂存树中的不同<code>git diff</code></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-89b3e34b6f8059ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git diff 查看不同.png"></p>
<p>并提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am&quot;Fix typo&quot;</span><br></pre></td></tr></table></figure></p>
<p>漏字错字等失误称作typo，但是历史记录中不需要出现这类信息，所以要合并到上一个历史记录</p>
<p>（4）更改历史<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i HEAD~2</span><br></pre></td></tr></table></figure></p>
<p>用这种方法执行<code>git rebase</code>命令，可以选定当前分支中包含HEAD（最新提交）在内的两个最新历史记录为对象，并在编辑器中打开</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-faba54939955777e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最新两次历史记录.png"></p>
<p>将<code>ea3730a</code>左侧的pick部分删除，改为fixup，保存编辑器里的内容，关闭编辑器</p>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web前端规范（一）- JavaScript]]></title>
      <url>/2017/12/28/web%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83%EF%BC%88%E4%B8%80%EF%BC%89-JavaScript/</url>
      <content type="html"><![CDATA[<h2 id="Javascipt"><a href="#Javascipt" class="headerlink" title="Javascipt"></a>Javascipt</h2><h4 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h4><ol>
<li>使用4个空格作为一个缩进层级</li>
<li>关键字function、if、else、for、switch、do、try等后必须要跟一个空格</li>
<li>具体函数名后的(),不需要跟空格</li>
<li>代码块{}左起的{，前面要跟一个空格</li>
<li>（）或[]，中紧邻的参数不需要跟空格</li>
<li>多个参数时，’,’、’;’;前面不需要空格，若不是最后一个，则后面要跟一个空格</li>
<li>二元运算符左右都必须要跟一个空格</li>
<li>一元运算符与操作对象间不需要跟空格</li>
<li>在对象创建时，属性中的：之前必须要空格，之前不要空格</li>
<li>行尾不要多余的空格</li>
</ol>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function foo(a, b) &#123; //参数 ，后面要空格</span><br><span class="line">    var a = 2;//二元运算符左右都必须要跟一个空格</span><br><span class="line">    a++;</span><br><span class="line">    var obj=&#123;</span><br><span class="line">        m: 1, //对象创建时，属性中：后面要空格</span><br><span class="line">        n: 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 前端规范 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react开发路上的QA]]></title>
      <url>/2017/12/27/react%E5%BC%80%E5%8F%91%E8%B7%AF%E4%B8%8A%E7%9A%84QA/</url>
      <content type="html"><![CDATA[<h5 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error: Module &apos;C:\Users\angelama\Desktop\新建文件夹\react-to-do-list\node_modules\babel-core\index.js&apos; is not a loader (must have normal or pitch function)</span><br><span class="line">    at loadLoader (C:\Users\angelama\Desktop\新建文件夹\react-to-do-list\node_modules\loader-runner\lib\loadLoader.js:35:10)</span><br><span class="line">    at iteratePitchingLoaders</span><br></pre></td></tr></table></figure>
<p>解决办法：<br>    webpack2已经不支持省略loader后缀，需要babel-loader<br>    <a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//webpack.config.js</span><br><span class="line">module:&#123;</span><br><span class="line">        //loaders加载器</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.(js|jsx)$/,//一个匹配loaders所处理的文件的拓展名的正则表达式，这里用来匹配js和jsx文件（必须）</span><br><span class="line">                exclude: /node_modules/,//屏蔽不需要处理的文件（文件夹）（可选）</span><br><span class="line">                loader: &apos;babel-loader&apos;//loader的名称（必须）</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="2、问题"><a href="#2、问题" class="headerlink" title="2、问题"></a>2、问题</h5><p>npm run dev报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Invalid configuration object. webpack-dev-server has been initialised using a configuration object that does not match the API schema.</span><br><span class="line"> - configuration has an unknown property &apos;process&apos;. These properties are valid:</span><br><span class="line">   object &#123; hot?, hotOnly?, lazy?, bonjour?, host?, allowedHosts?, filename?, publicPath?, port?, socket?, watchOptions?, headers?, clientLogLevel?, overlay?, progress?, key?, cert?, ca?, pfx?, pfxPassphrase?</span><br><span class="line">, requestCert?, inline?, disableHostCheck?, public?, https?, contentBase?, watchContentBase?, open?, useLocalIp?, openPage?, features?, compress?, proxy?, historyApiFallback?, staticOptions?, setup?, before?,</span><br><span class="line"> after?, stats?, reporter?, noInfo?, quiet?, serverSideRender?, index?, log?, warn? &#125;</span><br></pre></td></tr></table></figure>
<p>自动刷新的方式：<br>    在网页中嵌入了一个 iframe ，将我们自己的应用注入到这个 iframe 当中去，因此每次你修改的文件后，都是这个 iframe 进行了 reload</p>
<p>解决办法：<br>修改webpack.config.js配置,不要加 colors,progress 等，webpack2已经不支持这些<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    historyApiFallback: true,</span><br><span class="line">    inline: true,//注意：不写hot: true，否则浏览器无法自动更新；也不要写colors:true，progress:true等，webpack2.x已不支持这些</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<h5 id="3-antd引入样式文件"><a href="#3-antd引入样式文件" class="headerlink" title="3.antd引入样式文件"></a>3.antd引入样式文件</h5><p>报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error in ./node_moudle/antd/dist/antd.css   </span><br><span class="line">Moudle parse failed:Unexpected character&apos;@&apos;</span><br></pre></td></tr></table></figure></p>
<p>解决办法：webpack.config.js中 exclude注释掉，不然不会解析node_moudle中的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: /\.(scss|css)$/,</span><br><span class="line">    use: [&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;],</span><br><span class="line">    // exclude: /node_modules/,                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4-Q-mac执行git命令时候出现："><a href="#4-Q-mac执行git命令时候出现：" class="headerlink" title="4. Q:mac执行git命令时候出现："></a>4. Q:mac执行git命令时候出现：</h5><p>xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</p>
<p>A:打开终端输入，<br>xcode-select –install</p>
<p>回车后，系统弹出下载xcode，点击确认，下载完成后即可。（实际上不是下载xcode，可能下载xcode有关插件，下载时长约1分钟）</p>
<p>Remember, in MAC git is attached to XCode’s Command line tools.</p>
<p>Xcode 是运行在操作系统Mac OS X上的集成开发工具（IDE），由苹果公司开发。Xcode是开发OS X 和 iOS 应用程序的最快捷的方式。Xcode 具有统一的用户界面设计，编码、测试、调试都在一个简单的窗口内完成。</p>
]]></content>
      
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github+hexo搭建博客]]></title>
      <url>/2017/12/15/github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;page&quot;——新建文章</span><br><span class="line">$ hexo clean ——清空缓存（db.json）和已生成的静态文件（public）</span><br><span class="line">$ hexo generate —— 生成静态文件</span><br><span class="line">$ hexo deploy —— 重新部署到服务器</span><br></pre></td></tr></table></figure>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>你可以到<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网主题页</a>去搜寻自己喜欢的theme。这里以<a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">hexo-theme-next</a>为例<br><a id="more"></a><br>终端cd到 blog 目录下执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>
<p>终端cd到blog目录下执行如下命令(每次部署文章的步骤)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean           //清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br></pre></td></tr></table></figure></p>
<pre>$ hexo g //生成缓存和静态文件</pre>

<pre>$ hexo d //重新部署到服务器</pre>

<p>初步安装到这就已经可以简单的写文章，运行科，至于更改theme内容，比如名称，描述，头像等去修改blog/_config.yml文件和blog/themes/next/_config.yml文件中对应的属性名称即可， 不要忘记冒号:后加空格。 NexT 使用文档里有极详细的介绍。</p>
<blockquote>
<p><a href="http://www.jianshu.com/p/13e64c9e2295" target="_blank" rel="noopener">参考文章：基础搭建</a> </p>
<p><a href="http://blog.csdn.net/linshuhe1/article/details/52424573" target="_blank" rel="noopener">参考文章：后期功能 统计、搜索</a></p>
<p><a href="https://www.jianshu.com/p/86557c34b671" target="_blank" rel="noopener">参考文章：优化hexo seo</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> github </category>
            
        </categories>
        
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack]]></title>
      <url>/2017/12/15/webpack/</url>
      <content type="html"><![CDATA[<p>问题：<br>1、webpack用途<br>2、如何配置使用<br>3、注意事项</p>
<p>先看一个常见的webpack配置文件<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">var webpack = require(&apos;webpack&apos;);</span><br><span class="line">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line">var ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: __dirname + &quot;/app/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + &quot;/build&quot;,</span><br><span class="line">    filename: &quot;[name]-[hash].js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.json$/,</span><br><span class="line">        loader: &quot;json&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/,</span><br><span class="line">        loader: &apos;babel&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        loader: ExtractTextPlugin.extract(&apos;style&apos;, &apos;css?modules!postcss&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  postcss: [</span><br><span class="line">    require(&apos;autoprefixer&apos;)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: __dirname + &quot;/app/index.tmpl.html&quot;</span><br><span class="line">    &#125;),</span><br><span class="line">    new webpack.optimize.OccurenceOrderPlugin(),</span><br><span class="line">    new webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    new ExtractTextPlugin(&quot;[name]-[hash].css&quot;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="常见项目架构，自己上手搭建一个react项目"><a href="#常见项目架构，自己上手搭建一个react项目" class="headerlink" title="常见项目架构，自己上手搭建一个react项目"></a>常见项目架构，自己上手搭建一个react项目</h4><ol>
<li>npm init 新建package.json, 入口文件 index.js </li>
</ol>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fnkzipnvdmj30lv0dfq6b.jpg" alt="package.json"></p>
<ol>
<li>webpackjosn.config.js</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fnkzkah2jqj30wr0d7mzs.jpg" alt="webpack.config.js"></p>
<ol>
<li>index.js </li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fnkzdupl4wj30lf0cnmz4.jpg" alt="index"></p>
<ol>
<li>App.js</li>
</ol>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fnkzqt0mktj30i80d4gng.jpg" alt="App.js"></p>
<ol>
<li>index.html</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fnkzoais46j30kg0cwq4z.jpg" alt="index.html"></p>
<blockquote>
<p>参考文章<a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="noopener">入门webpack</a></p>
<p><a href="http://www.jianshu.com/p/418e48e0cef1" target="_blank" rel="noopener">React+Webpack快速上手指南</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解构函数]]></title>
      <url>/2017/11/12/%E8%A7%A3%E6%9E%84%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我该怎么样生活？这个问题不仅是人生道路之初的问题，更是贯穿人一生的问题。 —— 陈嘉映《何为良好生活》</p>
</blockquote>
<ul>
<li><p>Syntax 句法</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var a,b,rest;</span><br><span class="line">[a,b]=[10,20];</span><br><span class="line">console.log(a); //10</span><br><span class="line">console.log(b); //20</span><br><span class="line"></span><br><span class="line">[a,b,...rest] = [10,20,30,40,50];</span><br><span class="line">console.log(a); //10</span><br><span class="line">console.log(b); //20</span><br><span class="line">console.log(rest);  //[30,40,50]</span><br><span class="line"></span><br><span class="line">(&#123;a,b&#125; = &#123;a:10,b:20&#125;);</span><br><span class="line">console.log(a); //10</span><br><span class="line">console.log(b); //20</span><br><span class="line"></span><br><span class="line">(&#123;a,b,...rest&#125;=&#123;a:10,b:20,c:30,d:40&#125;);</span><br><span class="line">console.log(a); //10</span><br><span class="line">console.log(b); //20</span><br><span class="line">console.log(..rest); //&#123;c:30,d:40&#125;</span><br></pre></td></tr></table></figure>
 <a id="more"></a>
<ul>
<li><p>解构赋值 使用同样的语法，但是在赋值的左边定义了从源变量解开什么值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var x=[1,2,3,4,5];</span><br><span class="line">var [y,z] = x;</span><br><span class="line">console.log(y); //1</span><br><span class="line">console.log(z);  //2</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>数组解构 Array destructuring</p>
<ul>
<li><p>基本变量赋值 Basic variable assignment</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var foo =[&apos;one&apos;,&apos;two&apos;,&apos;three&apos;];</span><br><span class="line">var [x,y,z] = foo;</span><br><span class="line">console.log(x); //&quot;one&quot;</span><br><span class="line">console.log(y); //&quot;two&quot;</span><br><span class="line">console.log(z); //&quot;three&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过声明各自赋值<br>变量可以通过独立于变量声明的解构来赋值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a,b;</span><br><span class="line">[a,b]= [1,2];</span><br><span class="line">console.log(a); //1</span><br><span class="line">console.log(b); //2</span><br></pre></td></tr></table></figure>
</li>
<li><p>默认值<br>如果没有定义从数组中解压的值，则变量可以被赋默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a,b;</span><br><span class="line">[a=5,b=7] = [1];</span><br><span class="line">console.log(a); //1</span><br><span class="line">console.log(b); //7 —— 默认值</span><br></pre></td></tr></table></figure>
</li>
<li><p>交换变量<br>两个变量值可以在一个解构表达式中交换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a=10,b=20;</span><br><span class="line">[a,b] = [b,a];</span><br><span class="line">console.log(a); //20</span><br><span class="line">console.log(b); //10</span><br></pre></td></tr></table></figure>
</li>
<li><p>解析从函数中返回的数组<br>解构可以使数组返回值更简洁</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function f()&#123;</span><br><span class="line">    return [1,2]</span><br><span class="line">&#125;</span><br><span class="line">var a,b;</span><br><span class="line">[a,b] = f();</span><br><span class="line">console.log(a); //1</span><br><span class="line">console.log(b); //2</span><br></pre></td></tr></table></figure>
</li>
<li><p>忽略一些返回值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function f()&#123;</span><br><span class="line">    return [1,2,3];</span><br><span class="line">&#125;</span><br><span class="line">var a[a,,b]=f();</span><br><span class="line">console.log(a); //1</span><br><span class="line">console.log(b); //3</span><br></pre></td></tr></table></figure>
</li>
<li><p>将数组的其余部分分布给一个变量   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var [a,...b] = [1,2,3];</span><br><span class="line">console.log(a); //1</span><br><span class="line">console.oog(b); //[2,3]</span><br></pre></td></tr></table></figure>
</li>
<li><p>解开正则表达式匹配的值</p>
</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习笔记—精通css]]></title>
      <url>/2017/08/12/Note%E2%80%94%E7%B2%BE%E9%80%9Acss/</url>
      <content type="html"><![CDATA[<p>— 未完待续</p>
<h3 id="3-1-2外边距叠加"><a href="#3-1-2外边距叠加" class="headerlink" title="3.1.2外边距叠加"></a>3.1.2外边距叠加</h3><p>只有普通文档流中块框的垂直外边距才会发生外边距叠加，行内框、浮动框或绝对定位框之间的外边距不会叠加</p>
<h3 id="3-2定位概述"><a href="#3-2定位概述" class="headerlink" title="3.2定位概述"></a>3.2定位概述</h3><h4 id="3-2-1可视化格式模型"><a href="#3-2-1可视化格式模型" class="headerlink" title="3.2.1可视化格式模型"></a>3.2.1可视化格式模型</h4><p>css中有3种基本的定位机制:普通流、浮动、绝对定位。</p>
<p>如何修改行内框的尺寸？<br>1、行内框在一行中水平排列，可以使用水平内边距、边框、外边距调整他们的水平间距<br>2、行内框高度并不受垂直内边距、边框、和外边距的影响<br>3、行内框设置显式的高度和宽度也没有影响<br>4、修改行内框尺寸的唯一办法就是修改行高或者水平边框、水平内边距和外边距</p>
<a id="more"></a>
<h4 id="3-2-2相对定位"><a href="#3-2-2相对定位" class="headerlink" title="3.2.2相对定位"></a>3.2.2相对定位</h4><p>相对定位移动位置之后,元素仍然占据原来的空间，因此，这样移动会造成它覆盖其他框<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.myBox&#123;</span><br><span class="line">  position:relative;</span><br><span class="line">  left:20px;</span><br><span class="line">  top:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-9868a0667fe84899.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="相对定位.png"></p>
<p>####3.2.3绝对定位<br>相对定位实际上可以看做普通流定位模型中的一部分，因为元素的位置是相对于他在普通流中的位置。<br>绝对定位使元素的位置与文档流无关，因此不占据空间，普通文档流中其他元素的布局就是绝对定位的元素不存在一样。</p>
<p><strong>相对定位是“相对于”元素在文档流中的初始位置，而绝对定位是“相对于”距离它最近的已定位祖先元素，如果不存在已定位的祖先元素，那么相对于初始包含块</strong></p>
<h4 id="3-2-4浮动"><a href="#3-2-4浮动" class="headerlink" title="3.2.4浮动"></a>3.2.4浮动</h4><p>1、现象<br>浮动会让元素脱离文档流，不再影响不浮动的元素，实际上并不完全如此。<br>浮动元素后面的文档流元素，这个元素的框不受浮动影响，但是其中的文本元素会受影响，会移动以留出空间。技术术语：浮动元素旁边的行框被缩短，从而给浮动元素留出空间，因此行框围绕浮动框。实际上，创建浮动框使文本可以围绕图像。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-4870d142ade4e027.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不浮动.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-a50aad9c8a8471f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="浮动.png"></p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[时间戳]]></title>
      <url>/2017/07/02/%E6%97%B6%E9%97%B4%E6%88%B3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>你可以过闲云野鹤的生活，但是请先明白人间疾苦，你不用成为强大的人，但请一定成为懂得思考自身的人。——周宏翔 《名丽场》</p>
</blockquote>
<h3 id="日期转换为时间戳-不要时分秒"><a href="#日期转换为时间戳-不要时分秒" class="headerlink" title="日期转换为时间戳 不要时分秒"></a>日期转换为时间戳 不要时分秒</h3><p>转换为时间戳的函数  getTime();<br>但是只有 Date()格式的时间，才可以转换为时间戳，换言之<br>形如：Fri Feb 02 2018 11:23:40 GMT+0800 (CST)<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var data = new Date();  // data : Fri Feb 02 2018 11:23:40 GMT+0800 (CST)</span><br><span class="line">data.getTime(); // 1517541820502</span><br><span class="line"></span><br><span class="line">//只要年月日的时间戳，就需要 Date日期格式 只含有 年月日，时分秒为0 </span><br><span class="line">var data2 = new Date().toLocaleDateString();  //Date 的 toLocaleDateString 方法</span><br><span class="line">console.log(data2); //  &quot;2018/2/2&quot;  (现在时间为 2018/2/2)</span><br><span class="line"></span><br><span class="line">//把这个时间转换为 Date格式</span><br><span class="line"></span><br><span class="line">var value = new Date(data2).getTime(); //1517500800000</span><br></pre></td></tr></table></figure></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fo1wvay9gwj30d409v0tk.jpg" alt=""></p>
<p>转换为时间戳方法总结：</p>
<ul>
<li>data.getTime(); //1517541820502</li>
<li>data.valueOf(); //1517541820502</li>
<li>Date.parse(data); //1517541820000</li>
</ul>
<p>前两种方法精确到毫秒，后面一种 只能精确到秒，毫秒部分 用000 代替</p>
<h3 id="时间戳转换为日期"><a href="#时间戳转换为日期" class="headerlink" title="时间戳转换为日期"></a>时间戳转换为日期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var date = new Date(时间戳);</span><br><span class="line">var year = date.getFullYear(); //获取完整年份 2018</span><br><span class="line">var month = date.getMonth(); //获取月份（0-11） 要+1；</span><br><span class="line">var day = date.getDate(); //获取日期（1-31）</span><br><span class="line">var hour = date.Hours(); //获取小时数（0-23）</span><br><span class="line">var minutes = date.getMinutes(); //获取分钟数（0-59）</span><br><span class="line">var seconds = date.getSeconds(); //获取秒数 （0-59）</span><br><span class="line"></span><br><span class="line">var times = date.getTime(); //获取时间戳，从1970.1.1年开始的毫秒数</span><br><span class="line"></span><br><span class="line">var today = date.toLocaleDateString(); // toLocaleDateString() 方法可根据本地时间把 Date 对象的日期部分转换为字符串，并返回结果</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 时间戳 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式-小笔记]]></title>
      <url>/2017/06/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>正则表达式（regular expression）描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串</p>
<ul>
<li><code>+</code>表示前面的字符至少出现一次<br>  <code>run00+b</code>,可以匹配<code>run00b</code>、<code>run0000000b</code></li>
<li><code>*</code>表示前面的字符至少出现0次<br>  <code>run00*b</code>,可以匹配<code>run0b</code>、<code>run0000b</code></li>
<li><p><code>?</code>表示前面的字符最多只出现一次<br>  <code>colou?r</code>可以匹配<code>color</code>或者<code>colour</code></p>
  <!-- 待续 --></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css打造Mac Air]]></title>
      <url>/2017/03/20/css%E6%89%93%E9%80%A0Mac-Air/</url>
      <content type="html"><![CDATA[<p>期待的效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-08de2880d67fe06e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<a id="more"></a>
<p>####第0步</p>
<ol>
<li><p>box-shadow:0 5px 6px rgb(160,160,160);<br>基本语法是{box-shadow:[inset] x-offset y-offset blur-radius spread-radiuscolor}<br>对象选择器 {box-shadow:[投影方式] X轴偏移量 Y轴偏移量阴影模糊半径 阴影扩展半径 阴影颜色}</p>
<p>最后从div的左下角到右上角以60度添加一个线性渐变linear-gradient，是从白色开始从四分之一出过渡到灰色。</p>
</li>
<li>linear-gradient   <a href="http://www.jianshu.com/writer#/notebooks/6305867/notes/8965431" target="_blank" rel="noopener">css渐变</a></li>
</ol>
<p>####第1步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.board&#123;</span><br><span class="line">    background: rgb(210,210,210);</span><br><span class="line">    width:600px;</span><br><span class="line">    height:450px;</span><br><span class="line">    margin:0 auto;</span><br><span class="line">    -webkit-border-radius:20px;</span><br><span class="line">    -moz-border-radius:20px;</span><br><span class="line">    border-radius:20px;</span><br><span class="line">    box-shadow: 0px 5px 6px rgb(160,160,160);</span><br><span class="line">//线性渐变</span><br><span class="line">    background: -webkit-linear-gradient(60deg,rgba(250,250,250,1)25%,rgba(210,210,210,1)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此时，面板已经打造完成，效果呢，就像下面这个样子，忽略那些字符吧</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-a2fb98eeb2c8f04c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>####第2步 盖子<br>.board:before{ }<br>伪元素 要设置<code>display</code>属性，才可以确定它的样式，并显示出来</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-7d412f99e090f56e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>border-top-left-radius：border-bottom-right-radius: length|% [length|%];<br>注释：border-top-left-radius 属性的长度值和百分比值定义四分之一椭圆（定义外部边框边缘的边角形状）的半径（radii）。第一个值是水平半径，第二个值是垂直半径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rgb(30,60,100,180,210)各自的颜色趋向</span><br><span class="line">box-sizing</span><br><span class="line">box-shadow</span><br><span class="line">background: -webkit-linear-gradient(top,rgb(30,30,30),rgb(60,60,60)35%,rgb(100,100,100)50%,rgb(30,30,30)65%);</span><br></pre></td></tr></table></figure>
<p>当啷，键盘区画好啦<br><img src="http://upload-images.jianshu.io/upload_images/1424949-1f791159b13bdb73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>我们用box-shadow给keyboard的四条边框添加四条内部inset阴影，关于box-shadow以后有机会再讲，先把实现和效果贴上：</p>
<p>五、第五步</p>
<blockquote>
<p><a href="http://mp.weixin.qq.com/s/K33g-rlU0_AVMQADyPN-Aw" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/K33g-rlU0_AVMQADyPN-Aw</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css命名准则]]></title>
      <url>/2017/03/12/css%E5%91%BD%E5%90%8D%E5%87%86%E5%88%99/</url>
      <content type="html"><![CDATA[<p>####一、名字的本质是什么<br>    对于css，为了避免样式冲突，我们总是会赋予它相当特殊的命名，或者是在选择符上添加HTML标记，或是使用层级。我们会在避免冲突上狠作文章，所谓过犹不及，结果又是一个烂摊子，重用性会很低很低，这就导致本是窈窕淑女，却变得臃肿不堪。<br><a id="more"></a><br>例如，下面人人网的css命名（张鑫旭大大说需要这种反面例子的时候就去找人人和新浪，一找一个准(●’◡’●)）：<br><img src="http://upload-images.jianshu.io/upload_images/1424949-2795f43b32344cf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="人人.png"><br>    我们都希望写出精简高效的css代码，如果css重用性越高，就越高效，这个时候命名就要越简单、越容易被重用。BUT，简单的命名越容易造成样式冲突，例如 .more{ }。从这点上来说，【重用性】与【样式冲突】是两个对立的矛盾体。<br>    不过，这种矛盾并不是不可以调和的，记住一些准则和方法，css 既可以有高效的重用性，又不会有样式冲突。</p>
<ul>
<li>面向属性的命名方法</li>
</ul>
<blockquote>
<p>整理借鉴于<a href="http://www.zhangxinxu.com/wordpress/2010/09/%E7%B2%BE%E7%AE%80%E9%AB%98%E6%95%88%E7%9A%84css%E5%91%BD%E5%90%8D%E5%87%86%E5%88%99%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">张鑫旭大大的博文</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习笔记—Thinking in React]]></title>
      <url>/2017/03/11/Note%E2%80%94Thinking-in-React/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Start with a mock</p>
</blockquote>
<p>先来看一个简单设计<br><img src="http://upload-images.jianshu.io/upload_images/1424949-9bc006cfafdacd23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p><code>JSON API</code>返回如下数据<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;category: &quot;Sporting Goods&quot;, price: &quot;$49.99&quot;, stocked: true, name: &quot;Football&quot;&#125;,</span><br><span class="line">  &#123;category: &quot;Sporting Goods&quot;, price: &quot;$9.99&quot;, stocked: true, name: &quot;Baseball&quot;&#125;,</span><br><span class="line">  &#123;category: &quot;Sporting Goods&quot;, price: &quot;$29.99&quot;, stocked: false, name: &quot;Basketball&quot;&#125;,</span><br><span class="line">  &#123;category: &quot;Electronics&quot;, price: &quot;$99.99&quot;, stocked: true, name: &quot;iPod Touch&quot;&#125;,</span><br><span class="line">  &#123;category: &quot;Electronics&quot;, price: &quot;$399.99&quot;, stocked: false, name: &quot;iPhone 5&quot;&#125;,</span><br><span class="line">  &#123;category: &quot;Electronics&quot;, price: &quot;$199.99&quot;, stocked: true, name: &quot;Nexus 7&quot;&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>And then 见证奇迹的时刻到了</p>
</blockquote>
<p>####Step 1: Break the UI into a component hierarchy（将UI划分为组件的层级结构）</p>
<p>F：But how do you know what should be its own component?（怎样划分一个组件）<br>Q：Just use the same techniques for deciding if you should create a new function or object. （是否需要创建一个新的函数或者对象）</p>
<ul>
<li>One such technique is the single responsibility principle（单一责任原则）, that is, a component should ideally only do one thing（一个组件应该理想的只做一件事）. If it ends up growing, it should be decomposed into smaller subcomponents.</li>
<li>Since you’re often displaying a <code>JSON</code> data model to a user,you’ll find that if your model was built correctly, your <code>UI</code> (and therefore your component structure) will map nicely.（由于您经常向用户显示<code>JSON</code>数据模型，您会发现如果您的模型正确构建，您的<code>UI</code>（因此您的组件结构）将会很好地映射。）</li>
<li>That’s because <code>UI</code> and <code>data models</code> tend to adhere to the same information architecture, which means the work of separating your <code>UI</code> into components is often trivial. <strong>Just break it up into components that represent exactly one piece of your data model.</strong>（这是因为UI和数据模型倾向于遵循相同的信息体系结构，这意味着将UI划分为组件是徒劳无功的。<strong>只将其划分为  完全代表一种数据模型  的组件即可</strong>）</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-7978146b42bab666.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>You’ll see here that we have five components in our simple app. I’ve italicized the data each component represents.<br>1.FilterableProductTable <strong>(orange)</strong>: contains the entirety of the example<br>2.SearchBar <strong>(blue)</strong>: receives all user input<br>3.ProductTable<strong> (green)</strong>: displays and filters the data collection based on user input<br>4.ProductCategoryRow <strong>(turquoise)</strong>: displays a heading for each category<br>5.ProductRow <strong>(red)</strong>: displays a row for each product</p>
<ul>
<li>FilterableProductTable<ul>
<li>SearchBar</li>
<li>ProductTable<ul>
<li>ProductCategoryRow</li>
<li>ProductRow</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>####Step 2: Build a static version in React<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by AngelaMa on 2017/2/6.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var FilterableProductTable = React.createClass(&#123;</span><br><span class="line">  render:function()&#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;SearchBar /&gt;,</span><br><span class="line">        &lt;ProductTable products=&#123;this.props.products&#125;/&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var SearchBar = React.createClass(&#123;</span><br><span class="line">  render:function()&#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;Search...&quot;/&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          &lt;input type=&quot;checkbox&quot;/&gt;</span><br><span class="line">          &#123;&apos; &apos;&#125;</span><br><span class="line">          Only show products in stock</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var ProductTable = React.createClass(&#123;</span><br><span class="line">  render:function()&#123;</span><br><span class="line">    var rows=[];</span><br><span class="line">    var lastCategory = null;</span><br><span class="line">    this.props.products.forEach(function(product)&#123;</span><br><span class="line">      if(product.category !== lastCategory)&#123;</span><br><span class="line">        rows.push(&lt;ProductCategoryRow category=&#123;product.category&#125; key=&#123;product.category&#125;/&gt;);</span><br><span class="line">      &#125;</span><br><span class="line">      rows.push(&lt;ProductRow product=&#123;product&#125; key=&#123;product.name&#125; /&gt;);</span><br><span class="line">      lastCategory = product.category;</span><br><span class="line">    &#125;);</span><br><span class="line">    return(</span><br><span class="line">      &lt;table&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Price&lt;/th&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;&#123;rows&#125;&lt;/tbody&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var ProductCategoryRow = React.createClass(&#123;</span><br><span class="line">  render:function()&#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th colSpan=&quot;2&quot;&gt;&#123;this.props.category&#125;&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var ProductRow = React.createClass(&#123;</span><br><span class="line">  render:function()&#123;</span><br><span class="line">    var name = this.props.product.stocked?</span><br><span class="line">      this.props.product.name:</span><br><span class="line">      &lt;span style=&#123;&#123;color:&apos;red&apos;&#125;&#125;&gt;</span><br><span class="line">        &#123;this.props.product.name&#125;</span><br><span class="line">      &lt;/span&gt;;</span><br><span class="line">    return(</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&#123;name&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;this.props.product.price&#125;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var PRODUCTS = [</span><br><span class="line">  &#123;category: &apos;Sporting Goods&apos;, price: &apos;$49.99&apos;, stocked: true, name: &apos;Football&apos;&#125;,</span><br><span class="line">  &#123;category: &apos;Sporting Goods&apos;, price: &apos;$9.99&apos;, stocked: true, name: &apos;Baseball&apos;&#125;,</span><br><span class="line">  &#123;category: &apos;Sporting Goods&apos;, price: &apos;$29.99&apos;, stocked: false, name: &apos;Basketball&apos;&#125;,</span><br><span class="line">  &#123;category: &apos;Electronics&apos;, price: &apos;$99.99&apos;, stocked: true, name: &apos;iPod Touch&apos;&#125;,</span><br><span class="line">  &#123;category: &apos;Electronics&apos;, price: &apos;$399.99&apos;, stocked: false, name: &apos;iPhone 5&apos;&#125;,</span><br><span class="line">  &#123;category: &apos;Electronics&apos;, price: &apos;$199.99&apos;, stocked: true, name: &apos;Nexus 7&apos;&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;FilterableProductTable products=&#123;PRODUCTS&#125;/&gt;,</span><br><span class="line">  document.getElementById(&apos;content&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>It’s best to decouple these processes because building a static version requires a lot of typing and no thinking, and adding interactivity requires a lot of thinking and not a lot of typing.（最好解耦合这些进程，因为建立一个静态的版本需要大量的打字，没有思想，添加交互性需要大量的思考而不是打字。）<br>Props：props are a way of passing data from parent to child.<br>State：State is reserved only for interactivity, that is, data that changes over time.（State仅用于交互性，即随时间变化的数据）<br>In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up and write tests as you build.（在更简单的例子中，通常更容易从上到下，而在更大的项目中，更容易从底层向上和编写测试。）<br>React’s one-way data flow (also called one-way binding) keeps everything modular and fast.（React的单项数据流保证了模块化和快速）</p>
<p>####Step 3: Identify the minimal (but complete) representation of UI state<br>（识别UI状态的最小（但完整）表示）<br>Figure out the absolute minimal representation of the state your application needs and compute everything else you need on-demand. （识别你的应用需要的绝对最小表示，并且计算你需要的所有其他内容）<br>For example, if you’re building a TODO list, just keep an array of the TODO items around; don’t keep a separate state variable for the count.（例如，构建一个TODO List，只需要保留TODO项目的数组，不要为计数保留单独的状态变量）</p>
<p>Let’s go through each one and figure out which one is state. Simply ask three questions about each piece of data:</p>
<ul>
<li>Is it passed in from a parent via props? If so, it probably isn’t state.（通过props从父进程而来？）</li>
<li>Does it remain unchanged over time? If so, it probably isn’t state.（随时间保持不变？）</li>
<li>Can you compute it based on any other state or props in your component? If so, it isn’t state.（根据组件中的）<br>Step 4: Identify where your state should live</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">var FilterableProductTable = React.createClass(&#123;</span><br><span class="line">  getInitialState: function() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      filterText: &apos;&apos;,</span><br><span class="line">      inStockOnly: false</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  render: function() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;SearchBar</span><br><span class="line">          filterText=&#123;this.state.filterText&#125;</span><br><span class="line">          inStockOnly=&#123;this.state.inStockOnly&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;ProductTable</span><br><span class="line">          products=&#123;this.props.products&#125;</span><br><span class="line">          filterText=&#123;this.state.filterText&#125;</span><br><span class="line">          inStockOnly=&#123;this.state.inStockOnly&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var SearchBar = React.createClass(&#123;</span><br><span class="line">  render: function() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;Search...&quot; value=&#123;this.props.filterText&#125; /&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          &lt;input type=&quot;checkbox&quot; checked=&#123;this.props.inStockOnly&#125; /&gt;</span><br><span class="line">          &#123;&apos; &apos;&#125;</span><br><span class="line">          Only show products in stock</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var ProductTable = React.createClass(&#123;</span><br><span class="line">  render: function() &#123;</span><br><span class="line">    var rows = [];</span><br><span class="line">    var lastCategory = null;</span><br><span class="line">    this.props.products.forEach(function(product) &#123;</span><br><span class="line">      if (product.name.indexOf(this.props.filterText) === -1 || (!product.stocked &amp;&amp; this.props.inStockOnly)) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      if (product.category !== lastCategory) &#123;</span><br><span class="line">        rows.push(&lt;ProductCategoryRow category=&#123;product.category&#125; key=&#123;product.category&#125; /&gt;);</span><br><span class="line">      &#125;</span><br><span class="line">      rows.push(&lt;ProductRow product=&#123;product&#125; key=&#123;product.name&#125; /&gt;);</span><br><span class="line">      lastCategory = product.category;</span><br><span class="line">    &#125;.bind(this));</span><br><span class="line">    return (</span><br><span class="line">      &lt;table&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Price&lt;/th&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;&#123;rows&#125;&lt;/tbody&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>####Step 5: Add inverse data flow（添加逆向数据流）</p>
<p>Let’s think about what we want to happen. We want to make sure that whenever the user changes the form, we update the <code>state</code> to reflect the user <code>input</code>. Since components should only update their own state, <code>FilterableProductTable</code> will pass a callback to <code>SearchBar</code> that will fire whenever the state should be updated. We can use the <code>onChange</code> event on the inputs to be notified of it. And the callback passed by <code>FilterableProductTable</code> will call <code>setState()</code>, and the app will be updated.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">var FilterableProductTable = React.createClass(&#123;</span><br><span class="line">  getInitialState:function()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        filterText:&apos;&apos;,</span><br><span class="line">        inStockOnly:false,</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  handleUserInput:function(filterText,inStockOnly)&#123;</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      filterText:filterText,</span><br><span class="line">      inStockOnly:inStockOnly</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  render:function()&#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;SearchBar</span><br><span class="line">          filterText=&#123;this.state.filterText&#125;</span><br><span class="line">          inStockOnly=&#123;this.state.inStockOnly&#125;</span><br><span class="line">          onUserInput=&#123;this.handleUserInput&#125;</span><br><span class="line">        /&gt;,</span><br><span class="line">        &lt;ProductTable</span><br><span class="line">          products=&#123;this.props.products&#125;</span><br><span class="line">          filterText=&#123;this.state.filterText&#125;</span><br><span class="line">          inStockOnly=&#123;this.state.inStockOnly&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var SearchBar = React.createClass(&#123;</span><br><span class="line">  handleChange:function()&#123;</span><br><span class="line">    this.props.onUserInput(</span><br><span class="line">      this.refs.filterTextInput.value,</span><br><span class="line">      this.refs.inStockOnlyInput.checked</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  render:function()&#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;Search...&quot; value=&#123;this.props.filterText&#125; ref=&quot;filterTextInput&quot; onChange=&#123;this.handleChange&#125;/&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">          &lt;input type=&quot;checkbox&quot; checked=&#123;this.props.inStockOnly&#125; ref=&quot;inStockOnlyInput&quot; onchange=&#123;this.handleChange&#125;/&gt;</span><br><span class="line">          &#123;&apos; &apos;&#125;</span><br><span class="line">          Only show products in stock</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var ProductTable = React.createClass(&#123;</span><br><span class="line">  render:function()&#123;</span><br><span class="line">    var rows=[];</span><br><span class="line">    var lastCategory = null;</span><br><span class="line">    this.props.products.forEach(function(product)&#123;</span><br><span class="line">      if (product.name.indexOf(this.props.filterText) === -1 || (!product.stocked &amp;&amp; this.props.inStockOnly)) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      if(product.category !== lastCategory)&#123;</span><br><span class="line">        rows.push(&lt;ProductCategoryRow category=&#123;product.category&#125; key=&#123;product.category&#125;/&gt;);</span><br><span class="line">      &#125;</span><br><span class="line">      rows.push(&lt;ProductRow product=&#123;product&#125; key=&#123;product.name&#125; /&gt;);</span><br><span class="line">      lastCategory = product.category;</span><br><span class="line">    &#125;.bind(this));</span><br><span class="line">    return(</span><br><span class="line">      &lt;table&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Price&lt;/th&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;&#123;rows&#125;&lt;/tbody&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var ProductCategoryRow = React.createClass(&#123;</span><br><span class="line">  render:function()&#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th colSpan=&quot;2&quot;&gt;&#123;this.props.category&#125;&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var ProductRow = React.createClass(&#123;</span><br><span class="line">  render:function()&#123;</span><br><span class="line">    var name = this.props.product.stocked?</span><br><span class="line">      this.props.product.name:</span><br><span class="line">      &lt;span style=&#123;&#123;color:&apos;red&apos;&#125;&#125;&gt;</span><br><span class="line">        &#123;this.props.product.name&#125;</span><br><span class="line">      &lt;/span&gt;;</span><br><span class="line">    return(</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;&#123;name&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;this.props.product.price&#125;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var PRODUCTS = [</span><br><span class="line">  &#123;category: &apos;Sporting Goods&apos;, price: &apos;$49.99&apos;, stocked: true, name: &apos;Football&apos;&#125;,</span><br><span class="line">  &#123;category: &apos;Sporting Goods&apos;, price: &apos;$9.99&apos;, stocked: true, name: &apos;Baseball&apos;&#125;,</span><br><span class="line">  &#123;category: &apos;Sporting Goods&apos;, price: &apos;$29.99&apos;, stocked: false, name: &apos;Basketball&apos;&#125;,</span><br><span class="line">  &#123;category: &apos;Electronics&apos;, price: &apos;$99.99&apos;, stocked: true, name: &apos;iPod Touch&apos;&#125;,</span><br><span class="line">  &#123;category: &apos;Electronics&apos;, price: &apos;$399.99&apos;, stocked: false, name: &apos;iPhone 5&apos;&#125;,</span><br><span class="line">  &#123;category: &apos;Electronics&apos;, price: &apos;$199.99&apos;, stocked: true, name: &apos;Nexus 7&apos;&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;FilterableProductTable products=&#123;PRODUCTS&#125;/&gt;,</span><br><span class="line">  document.getElementById(&apos;content&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css三角形一些不得不说的故事]]></title>
      <url>/2017/01/12/css%E4%B8%89%E8%A7%92%E5%BD%A2%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%BE%97%E4%B8%8D%E8%AF%B4%E7%9A%84%E6%95%85%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>经常会用到三角形（比如对话啊，气泡之类的地方），用于明确指向发言者<br>总是百度一下成型的写法，一直想研究下，耐不住懒啊<br>终于打败的我的拖延症，整体下那些关于CSS三角形的故事</p>
<hr>
<p>分为两种 （1）类名；（2）伪类<br>貌似这两种写法都和border脱不了干系，那我们先来看看 border 的到底是如何作用在盒模型上的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-960c590c514c6e59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="常见盒模型"><br><a id="more"></a><br>随便来个盒模型，当当当<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.Triangular  .bubble&#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    border-top:10px solid #000;</span><br><span class="line">    border-right:10px solid red;</span><br><span class="line">    border-bottom:10px solid blue;</span><br><span class="line">    border-left:10px solid green;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>原来border的四个边，在拐角相遇的时候，各占45°，嗯~ 很合理<br><img src="http://upload-images.jianshu.io/upload_images/1424949-aba7e30865bb059c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="随便来个盒模型"><br>既然这样，那定义类名写三角形就很简单了</p>
<p>一.   定义类名</p>
<hr>
<p>让内容为0，需要哪个方向的角，写那个方向的<code>boder</code>即可，需要注意的是，单单只写一个方向的<code>border</code>无效，需要相邻方向的<code>border</code>一起来定义，好比这是公共区域，一个人说了不算</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//两个方向</span><br><span class="line">.test&#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-top: 10px solid #000;</span><br><span class="line">    border-right：10px solid transparent;</span><br><span class="line">&#125;</span><br><span class="line">//三个方向</span><br><span class="line">.test&#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-top: 10px solid #000;</span><br><span class="line">    border-right：10px solid transparent;</span><br><span class="line">    border-left：10px solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-1e17bdffde7f6f2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="两个方向"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-79fb2b9654262b1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="三个方向"><br>综上：需要相邻的三个<code>border</code>才能定义一个水平垂直方向的三角形</p>
<p>写的简单一点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.test&#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border: 10px solid transparent;</span><br><span class="line">    border-top: 10px solid #000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第二步，相对父元素定位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.father&#123;</span><br><span class="line">  position:relative;</span><br><span class="line">&#125;</span><br><span class="line">.test&#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-right: 10px solid #000;</span><br><span class="line">    border: 10px solid transparent;</span><br><span class="line">    //定位</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: -10px;</span><br><span class="line">    top: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-4ebcb20dc0c87123.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="相对父元素定位"></p>
<p>利用伪类也是很常用的方法，实现方法类似</p>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[http状态码]]></title>
      <url>/2017/01/02/http%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      <content type="html"><![CDATA[<ul>
<li>1XX : 信息类，表示收到的web浏览器请求，正在进一步的处理中</li>
<li>2XX ：成功，表示用户请求被正确接收，理解和处理，eg：200 OK</li>
<li>3XX ：重定向，表示请求没有成功，客户必须采取进一步的动作</li>
<li>4XX : 客户端错误，表示客户端提交的请求有错误，例如：404 NOT Found，意味着请求中所引用的文档不存在</li>
<li>5XX ：服务器错误，表示服务器不能完成队对请求的处理</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[两个静态html之间相互传值]]></title>
      <url>/2016/09/12/%E4%B8%A4%E4%B8%AA%E9%9D%99%E6%80%81html%E4%B9%8B%E9%97%B4%E7%9B%B8%E4%BA%92%E4%BC%A0%E5%80%BC/</url>
      <content type="html"><![CDATA[<blockquote>
<h4 id="关键词-：url"><a href="#关键词-：url" class="headerlink" title="关键词 ：url"></a>关键词 ：url</h4><h4 id="主要思想：-通过url-在两个页面之间传值"><a href="#主要思想：-通过url-在两个页面之间传值" class="headerlink" title="主要思想： 通过url 在两个页面之间传值"></a>主要思想： 通过url 在两个页面之间传值</h4></blockquote>
<p>  1、 a.html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;    </span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;    </span><br><span class="line">  &lt;title&gt;a&lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; id=&quot;name&quot; class=&quot;input7&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;OK&quot; onclick=&quot;show()&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;    </span><br><span class="line">  function show()&#123;        </span><br><span class="line">    var result = document.getElementById(&quot;name&quot;).value;        </span><br><span class="line">    location.href=&quot;b.html?name=&quot;+result;      //利用url参数传递！！！</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p> 2、b.html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;    </span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;    </span><br><span class="line">&lt;title&gt;b&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;    </span><br><span class="line">  &lt;input type=&quot;button&quot; onclick=&quot;getValue(&apos;name&apos;)&quot; value=&quot;GetValue&quot;/&gt;</span><br><span class="line">&lt;script&gt;    </span><br><span class="line">function getValue(name) &#123;        </span><br><span class="line">  var str = window.location.search;   // location.search是从当前URL的?号开始的字符串        </span><br><span class="line">  if (str.indexOf(name) != -1) &#123;            </span><br><span class="line">      var pos_start = str.indexOf(name) + name.length + 1;            </span><br><span class="line">      var pos_end = str.indexOf(&quot;&amp;&quot;, pos_start);            //检查是否有其他的参数传递</span><br><span class="line">      if (pos_end == -1) &#123;                </span><br><span class="line">          alert(str.substring(pos_start));            </span><br><span class="line">      &#125; else &#123;         </span><br><span class="line">         alert(&quot;没有此值~~&quot;);            </span><br><span class="line">      &#125;        </span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>3、效果图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-110e129750b02566.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
]]></content>
      
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
