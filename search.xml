<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[react-router温故知新]]></title>
      <url>/2018/01/18/react-router%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>谁等待了足够的时间，谁就将永远等待下去，超过了某一个期限，就什么也不会发生了。 —— 塞缪尔·贝克特 《马龙之死》</p>
</blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器的工作原理]]></title>
      <url>/2018/01/16/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 人的尊严就在于，能够对我们看似前后矛盾的命运逻辑，反复的质疑。—— 英格玛·伯格曼《第七封印》</p>
</blockquote>
<h4 id="浏览器的主要功能"><a href="#浏览器的主要功能" class="headerlink" title="浏览器的主要功能"></a>浏览器的主要功能</h4><ul>
<li>浏览器的主要功能是将用户选择的web资源呈现出来，需要从数据库请求资源，并将其显示在浏览器窗口中，资源的格式通常是html，也包括PDF、image以及其他格式。用户用URL（Uniform Resource Identifier统一资源标识符）来指定请求资源的位置</li>
<li>HTML和CSS规范中规定了浏览器解释html文档的方式，由 W3C组织对这些规范进行维护，W3C是负责制定web标准的组织。</li>
</ul>
<a id="more"></a>
<ul>
<li>虽然各大浏览器厂商纷纷开发自己的扩展，遵循的规则并不完善，为web开发者带来严重的兼容性问题，但是浏览器的用户界面差不多，常见的用户界面<ul>
<li>用来输入URL的地址栏</li>
<li>前进、后退按钮</li>
<li>书签选项</li>
<li>用于刷新、暂停当前加载文档的刷新、暂停按钮</li>
<li>用于到达主页的主页按钮</li>
</ul>
</li>
</ul>
<h4 id="浏览器的主要构成"><a href="#浏览器的主要构成" class="headerlink" title="浏览器的主要构成"></a>浏览器的主要构成</h4><ul>
<li>用户界面——包括 地址栏、前进后退按钮、书签目录、（所看到的除了用来显示你所请求的页面的主窗口之外的部分）</li>
<li>浏览器引擎——用来查询以操作渲染引擎的接口</li>
<li>渲染引擎——显示请求的内容，例如如果请求的html，他负责解析html及css，并将解析后的结果显示出来</li>
<li>网络——用来完成网络调用，例如http请求，它是平台无关的接口</li>
<li>UI后端——用来绘制类似组合选择框和对话框等基本组件，具有不特定于某个平台的通用接口</li>
<li>JS解释器</li>
<li>数据存储</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git用法小结]]></title>
      <url>/2018/01/01/git%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 在一个日益麻木不仁的世界上，我们的知觉都已生了硬痂。—— 罗伯特·詹姆斯·沃勒 《廊桥遗梦》</p>
</blockquote>
<h4 id="第4章-通过实际操作学习git"><a href="#第4章-通过实际操作学习git" class="headerlink" title="第4章 通过实际操作学习git"></a>第4章 通过实际操作学习git</h4><h5 id="4-1-git基本操作"><a href="#4-1-git基本操作" class="headerlink" title="4.1 git基本操作"></a>4.1 git基本操作</h5><ol>
<li><code>git init</code>— 初始化仓库<br>生成  .git   文件夹，这个 .git 目录里管理着当前目录内容所需的仓库数据，在Git中，我们将这个目录的内容成为“附属于该仓库的工作树”。</li>
<li><code>git status</code>— 查看仓库的状态</li>
<li><code>mkdir  abc</code>  创建文件夹abc</li>
<li><code>touch abc.html</code>  创建文件 abc.html</li>
</ol>
<a id="more"></a>
<ol>
<li><code>git log</code> — 查看提交日志<br>(1) 只显示指定目录、文件的日志 <code>$ git log README.md</code><br>(2)显示文件的具体改动内容 <code>$ git log -p</code></li>
</ol>
<ul>
<li><code>git diff</code>查看工作树和暂存区的区别<br>不妨养成在<code>$ git commit</code>之前，<code>$ git diff HEAD</code>,查看本次提交和上次提交有什么区别<br><em><code>HEAD</code>是指针，指向当前分支的最新一次提交</em></li>
</ul>
<hr>
<h5 id="4-2分支的操作"><a href="#4-2分支的操作" class="headerlink" title="4.2分支的操作"></a>4.2分支的操作</h5><ol>
<li><code>git branch</code>— 显示分支一览表</li>
<li><code>$ git checkout -b</code> 创建、切换分支<br>如果你想以当前的master分支为基础创建新的分支，我们需要用到<code>$git checkout -b</code><br>(1)创建 feature-A 分支，并进行提交<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-A    //创建分支 feature-A</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>等同于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch feature-A //创建分支</span><br><span class="line">$ git checkout feature-A //切换到分支</span><br></pre></td></tr></table></figure></p>
<p>(2)切换到 master 分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git checkout master   //checkout 查看</span><br></pre></td></tr></table></figure></p>
<p><code>git checkout -</code>  ‘-‘ 连字符表示切换回上一个分支</p>
<ul>
<li><code>git merge</code> — 合并分支<br>假设<code>feature-A</code> 这个特性分支开发完毕，想要将他合并到主干分支<code>master</code>中。<br>(1)首先切换到 <code>master</code> 分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git checkout master</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>(2)然后合并分支， 为了历史记录，需要创建合并提交，因此在合并时加上 <code>--no-ff</code>参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff feature-A</span><br></pre></td></tr></table></figure></p>
<p><strong> 咳咳咳！！！！敲黑板，这个时候会进入 vim 编辑器状态，想当时我折腾了半天不知道那是个啥</strong><br>随后编辑器会启动，用于录入和并提交的信息<br>，默认信息中已经包含了是从分支合并过来的相关内容，所以保存就好了，然后关闭编辑器<br>先退出输出状态 Esc，然后进入输入状态 shift + ：，最后输入 wq！（保存并退出）<br><a href="http://www.cnblogs.com/yangjig/p/6014198.html" target="_blank" rel="noopener">vim命令总结</a><br>(3)成功的话，就会看到</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-977574ac299ec495.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="合并成功返回"></p>
<p>4.. <code>git log --graph</code> — 以图标的形式查看分支<br>此时此刻很有成就感，成功新建了一个分支，并且合并啦</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-cd592f80866d3961.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="历史记录图表.png"></p>
<hr>
<h5 id="4-3-更改提交的操作"><a href="#4-3-更改提交的操作" class="headerlink" title="4.3 更改提交的操作"></a>4.3 更改提交的操作</h5><ol>
<li><code>git reset</code> — 回溯历史版本<br>如果此时我想创建一个feature-A 的兄弟分支，feature-B，怎么办呢？<br>那就需要回溯到创建A的分支之前的节点，创建一个B分支，<br>（1）要让仓库的HEAD、暂存区、当前工作树回溯到制定状态，需要用到<code>git reset --hard</code>命令，只需要提供目标时间点的哈希值，就可以完全恢复至改时间点的状态。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-8e305127ef2e245b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>（2）此时已经恢复到了创建分支A之前的节点，创建分支B<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-B</span><br></pre></td></tr></table></figure></p>
<p>随便写点什么，并且提交，一定要提交哦，也就是<code>git add</code> 、<code>git commit</code>，不然没有记录，如果自己不小心把代码搞丢了，是找不到的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-0c3b4ea093ba6e47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="现在的状态.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-3de311deb73797ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="我的目标状态.png"><br>（3）分支培育好了，要合并了<br> ———推进至A分支合并后的状态<br><code>git log</code> 命令只能查看以当前状态为终点的历史日志，所以这里要使用 <code>git reflog</code>命令，查看当前仓库的操作日志 ，寻找此时的哈希值，然后<code>git reset --hard</code>,之后合并<br>2.<code>git rebase -i</code>——压缩历史<br>在合并特性分支之前，如果发现已提交的内容中有些许拼写错误，这可以合并到上一个提交压缩成一个历史记录，来保证历史记录的高效性、正确性。<br>（1）创建分支C<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b ccc</span><br></pre></td></tr></table></figure></p>
<p>（2）对文件进行修改（并预留错误），并提交<br>很小的更改可以直接一次性<code>git commit -am&quot;information&quot;</code>，不需要<code>git add</code>， <code>git commit</code><br>（3）修正代码中错误<br>查看一下当前工作区和暂存树中的不同<code>git diff</code></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-89b3e34b6f8059ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git diff 查看不同.png"></p>
<p>并提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am&quot;Fix typo&quot;</span><br></pre></td></tr></table></figure></p>
<p>漏字错字等失误称作typo，但是历史记录中不需要出现这类信息，所以要合并到上一个历史记录</p>
<p>（4）更改历史<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase -i HEAD~2</span><br></pre></td></tr></table></figure></p>
<p>用这种方法执行<code>git rebase</code>命令，可以选定当前分支中包含HEAD（最新提交）在内的两个最新历史记录为对象，并在编辑器中打开</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-faba54939955777e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最新两次历史记录.png"></p>
<p>将<code>ea3730a</code>左侧的pick部分删除，改为fixup，保存编辑器里的内容，关闭编辑器</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[web前端规范（一）- JavaScript]]></title>
      <url>/2017/12/28/web%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83%EF%BC%88%E4%B8%80%EF%BC%89-JavaScript/</url>
      <content type="html"><![CDATA[<h2 id="Javascipt"><a href="#Javascipt" class="headerlink" title="Javascipt"></a>Javascipt</h2><h4 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h4><ol>
<li>使用4个空格作为一个缩进层级</li>
<li>关键字function、if、else、for、switch、do、try等后必须要跟一个空格</li>
<li>具体函数名后的(),不需要跟空格</li>
<li>代码块{}左起的{，前面要跟一个空格</li>
<li>（）或[]，中紧邻的参数不需要跟空格</li>
<li>多个参数时，’,’、’;’;前面不需要空格，若不是最后一个，则后面要跟一个空格</li>
<li>二元运算符左右都必须要跟一个空格</li>
<li>一元运算符与操作对象间不需要跟空格</li>
<li>在对象创建时，属性中的：之前必须要空格，之前不要空格</li>
<li>行尾不要多余的空格</li>
</ol>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function foo(a, b) &#123; //参数 ，后面要空格</span><br><span class="line">    var a = 2;//二元运算符左右都必须要跟一个空格</span><br><span class="line">    a++;</span><br><span class="line">    var obj=&#123;</span><br><span class="line">        m: 1, //对象创建时，属性中：后面要空格</span><br><span class="line">        n: 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 规范 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react开发路上的QA]]></title>
      <url>/2017/12/27/react%E5%BC%80%E5%8F%91%E8%B7%AF%E4%B8%8A%E7%9A%84QA/</url>
      <content type="html"><![CDATA[<h5 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error: Module &apos;C:\Users\angelama\Desktop\新建文件夹\react-to-do-list\node_modules\babel-core\index.js&apos; is not a loader (must have normal or pitch function)</span><br><span class="line">    at loadLoader (C:\Users\angelama\Desktop\新建文件夹\react-to-do-list\node_modules\loader-runner\lib\loadLoader.js:35:10)</span><br><span class="line">    at iteratePitchingLoaders</span><br></pre></td></tr></table></figure>
<p>解决办法：<br>    webpack2已经不支持省略loader后缀，需要babel-loader<br>    <a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//webpack.config.js</span><br><span class="line">module:&#123;</span><br><span class="line">        //loaders加载器</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.(js|jsx)$/,//一个匹配loaders所处理的文件的拓展名的正则表达式，这里用来匹配js和jsx文件（必须）</span><br><span class="line">                exclude: /node_modules/,//屏蔽不需要处理的文件（文件夹）（可选）</span><br><span class="line">                loader: &apos;babel-loader&apos;//loader的名称（必须）</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h5 id="2、问题"><a href="#2、问题" class="headerlink" title="2、问题"></a>2、问题</h5><p>npm run dev报错</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Invalid configuration object. webpack-dev-server has been initialised using a configuration object that does not match the API schema.</span><br><span class="line"> - configuration has an unknown property &apos;process&apos;. These properties are valid:</span><br><span class="line">   object &#123; hot?, hotOnly?, lazy?, bonjour?, host?, allowedHosts?, filename?, publicPath?, port?, socket?, watchOptions?, headers?, clientLogLevel?, overlay?, progress?, key?, cert?, ca?, pfx?, pfxPassphrase?</span><br><span class="line">, requestCert?, inline?, disableHostCheck?, public?, https?, contentBase?, watchContentBase?, open?, useLocalIp?, openPage?, features?, compress?, proxy?, historyApiFallback?, staticOptions?, setup?, before?,</span><br><span class="line"> after?, stats?, reporter?, noInfo?, quiet?, serverSideRender?, index?, log?, warn? &#125;</span><br></pre></td></tr></table></figure>
<p>自动刷新的方式：<br>    在网页中嵌入了一个 iframe ，将我们自己的应用注入到这个 iframe 当中去，因此每次你修改的文件后，都是这个 iframe 进行了 reload</p>
<p>解决办法：<br>修改webpack.config.js配置,不要加 colors,progress 等，webpack2已经不支持这些<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    historyApiFallback: true,</span><br><span class="line">    inline: true,//注意：不写hot: true，否则浏览器无法自动更新；也不要写colors:true，progress:true等，webpack2.x已不支持这些</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<h5 id="3-antd引入样式文件"><a href="#3-antd引入样式文件" class="headerlink" title="3.antd引入样式文件"></a>3.antd引入样式文件</h5><p>报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error in ./node_moudle/antd/dist/antd.css   </span><br><span class="line">Moudle parse failed:Unexpected character&apos;@&apos;</span><br></pre></td></tr></table></figure></p>
<p>解决办法：webpack.config.js中 exclude注释掉，不然不会解析node_moudle中的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: /\.(scss|css)$/,</span><br><span class="line">    use: [&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;],</span><br><span class="line">    // exclude: /node_modules/,                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4-Q-mac执行git命令时候出现："><a href="#4-Q-mac执行git命令时候出现：" class="headerlink" title="4. Q:mac执行git命令时候出现："></a>4. Q:mac执行git命令时候出现：</h5><p>xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun</p>
<p>A:打开终端输入，<br>xcode-select –install</p>
<p>回车后，系统弹出下载xcode，点击确认，下载完成后即可。（实际上不是下载xcode，可能下载xcode有关插件，下载时长约1分钟）</p>
<p>Remember, in MAC git is attached to XCode’s Command line tools.</p>
<p>Xcode 是运行在操作系统Mac OS X上的集成开发工具（IDE），由苹果公司开发。Xcode是开发OS X 和 iOS 应用程序的最快捷的方式。Xcode 具有统一的用户界面设计，编码、测试、调试都在一个简单的窗口内完成。</p>
]]></content>
      
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[github+hexo搭建博客]]></title>
      <url>/2017/12/15/github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;page&quot;——新建文章</span><br><span class="line">$ hexo clean ——清空缓存（db.json）和已生成的静态文件（public）</span><br><span class="line">$ hexo generate —— 生成静态文件</span><br><span class="line">$ hexo deploy —— 重新部署到服务器</span><br></pre></td></tr></table></figure>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>你可以到<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网主题页</a>去搜寻自己喜欢的theme。这里以<a href="http://theme-next.iissnan.com" target="_blank" rel="noopener">hexo-theme-next</a>为例<br><a id="more"></a><br>终端cd到 blog 目录下执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>
<p>终端cd到blog目录下执行如下命令(每次部署文章的步骤)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean           //清除缓存文件 (db.json) 和已生成的静态文件 (public)</span><br></pre></td></tr></table></figure></p>
<pre>$ hexo g //生成缓存和静态文件</pre>

<pre>$ hexo d //重新部署到服务器</pre>

<p>至于更改theme内容，比如名称，描述，头像等去修改blog/_config.yml文件和blog/themes/next/_config.yml文件中对应的属性名称即可， 不要忘记冒号:后加空格。 NexT 使用文档里有极详细的介绍。</p>
<blockquote>
<p><a href="http://www.jianshu.com/p/13e64c9e2295" target="_blank" rel="noopener">参考文章</a> </p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[webpack]]></title>
      <url>/2017/12/15/webpack/</url>
      <content type="html"><![CDATA[<p>问题：<br>1、webpack用途<br>2、如何配置使用<br>3、注意事项</p>
<p>先看一个常见的webpack配置文件<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">var webpack = require(&apos;webpack&apos;);</span><br><span class="line">var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br><span class="line">var ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: __dirname + &quot;/app/main.js&quot;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + &quot;/build&quot;,</span><br><span class="line">    filename: &quot;[name]-[hash].js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.json$/,</span><br><span class="line">        loader: &quot;json&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        exclude: /node_modules/,</span><br><span class="line">        loader: &apos;babel&apos;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        loader: ExtractTextPlugin.extract(&apos;style&apos;, &apos;css?modules!postcss&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  postcss: [</span><br><span class="line">    require(&apos;autoprefixer&apos;)</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: __dirname + &quot;/app/index.tmpl.html&quot;</span><br><span class="line">    &#125;),</span><br><span class="line">    new webpack.optimize.OccurenceOrderPlugin(),</span><br><span class="line">    new webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    new ExtractTextPlugin(&quot;[name]-[hash].css&quot;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="常见项目架构，自己上手搭建一个react项目"><a href="#常见项目架构，自己上手搭建一个react项目" class="headerlink" title="常见项目架构，自己上手搭建一个react项目"></a>常见项目架构，自己上手搭建一个react项目</h4><ol>
<li>npm init 新建package.json, 入口文件 index.js </li>
</ol>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fnkzipnvdmj30lv0dfq6b.jpg" alt="package.json"></p>
<ol>
<li>webpackjosn.config.js</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fnkzkah2jqj30wr0d7mzs.jpg" alt="webpack.config.js"></p>
<ol>
<li>index.js </li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fnkzdupl4wj30lf0cnmz4.jpg" alt="index"></p>
<ol>
<li>App.js</li>
</ol>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fnkzqt0mktj30i80d4gng.jpg" alt="App.js"></p>
<ol>
<li>index.html</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fnkzoais46j30kg0cwq4z.jpg" alt="index.html"></p>
<blockquote>
<p>参考文章<a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="noopener">入门webpack</a></p>
<p><a href="http://www.jianshu.com/p/418e48e0cef1" target="_blank" rel="noopener">React+Webpack快速上手指南</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解构函数]]></title>
      <url>/2017/11/12/%E8%A7%A3%E6%9E%84%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<ul>
<li><p>Syntax 句法</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var a,b,rest;</span><br><span class="line">[a,b]=[10,20];</span><br><span class="line">console.log(a); //10</span><br><span class="line">console.log(b); //20</span><br><span class="line"></span><br><span class="line">[a,b,...rest] = [10,20,30,40,50];</span><br><span class="line">console.log(a); //10</span><br><span class="line">console.log(b); //20</span><br><span class="line">console.log(rest);  //[30,40,50]</span><br><span class="line"></span><br><span class="line">(&#123;a,b&#125; = &#123;a:10,b:20&#125;);</span><br><span class="line">console.log(a); //10</span><br><span class="line">console.log(b); //20</span><br><span class="line"></span><br><span class="line">(&#123;a,b,...rest&#125;=&#123;a:10,b:20,c:30,d:40&#125;);</span><br><span class="line">console.log(a); //10</span><br><span class="line">console.log(b); //20</span><br><span class="line">console.log(..rest); //&#123;c:30,d:40&#125;</span><br></pre></td></tr></table></figure>
 <a id="more"></a>
<ul>
<li><p>解构赋值 使用同样的语法，但是在赋值的左边定义了从源变量解开什么值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var x=[1,2,3,4,5];</span><br><span class="line">var [y,z] = x;</span><br><span class="line">console.log(y); //1</span><br><span class="line">console.log(z);  //2</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>数组解构 Array destructuring</p>
<ul>
<li><p>基本变量赋值 Basic variable assignment</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var foo =[&apos;one&apos;,&apos;two&apos;,&apos;three&apos;];</span><br><span class="line">var [x,y,z] = foo;</span><br><span class="line">console.log(x); //&quot;one&quot;</span><br><span class="line">console.log(y); //&quot;two&quot;</span><br><span class="line">console.log(z); //&quot;three&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过声明各自赋值<br>变量可以通过独立于变量声明的解构来赋值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a,b;</span><br><span class="line">[a,b]= [1,2];</span><br><span class="line">console.log(a); //1</span><br><span class="line">console.log(b); //2</span><br></pre></td></tr></table></figure>
</li>
<li><p>默认值<br>如果没有定义从数组中解压的值，则变量可以被赋默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a,b;</span><br><span class="line">[a=5,b=7] = [1];</span><br><span class="line">console.log(a); //1</span><br><span class="line">console.log(b); //7 —— 默认值</span><br></pre></td></tr></table></figure>
</li>
<li><p>交换变量<br>两个变量值可以在一个解构表达式中交换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a=10,b=20;</span><br><span class="line">[a,b] = [b,a];</span><br><span class="line">console.log(a); //20</span><br><span class="line">console.log(b); //10</span><br></pre></td></tr></table></figure>
</li>
<li><p>解析从函数中返回的数组<br>解构可以使数组返回值更简洁</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function f()&#123;</span><br><span class="line">    return [1,2]</span><br><span class="line">&#125;</span><br><span class="line">var a,b;</span><br><span class="line">[a,b] = f();</span><br><span class="line">console.log(a); //1</span><br><span class="line">console.log(b); //2</span><br></pre></td></tr></table></figure>
</li>
<li><p>忽略一些返回值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function f()&#123;</span><br><span class="line">    return [1,2,3];</span><br><span class="line">&#125;</span><br><span class="line">var a[a,,b]=f();</span><br><span class="line">console.log(a); //1</span><br><span class="line">console.log(b); //3</span><br></pre></td></tr></table></figure>
</li>
<li><p>将数组的其余部分分布给一个变量   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var [a,...b] = [1,2,3];</span><br><span class="line">console.log(a); //1</span><br><span class="line">console.oog(b); //[2,3]</span><br></pre></td></tr></table></figure>
</li>
<li><p>解开正则表达式匹配的值</p>
</li>
</ul>
</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[学习笔记—精通css]]></title>
      <url>/2017/08/12/Note%E2%80%94%E7%B2%BE%E9%80%9Acss/</url>
      <content type="html"><![CDATA[<p>— 未完待续</p>
<h3 id="3-1-2外边距叠加"><a href="#3-1-2外边距叠加" class="headerlink" title="3.1.2外边距叠加"></a>3.1.2外边距叠加</h3><p>只有普通文档流中块框的垂直外边距才会发生外边距叠加，行内框、浮动框或绝对定位框之间的外边距不会叠加</p>
<h3 id="3-2定位概述"><a href="#3-2定位概述" class="headerlink" title="3.2定位概述"></a>3.2定位概述</h3><h4 id="3-2-1可视化格式模型"><a href="#3-2-1可视化格式模型" class="headerlink" title="3.2.1可视化格式模型"></a>3.2.1可视化格式模型</h4><p>css中有3种基本的定位机制:普通流、浮动、绝对定位。</p>
<p>如何修改行内框的尺寸？<br>1、行内框在一行中水平排列，可以使用水平内边距、边框、外边距调整他们的水平间距<br>2、行内框高度并不受垂直内边距、边框、和外边距的影响<br>3、行内框设置显式的高度和宽度也没有影响<br>4、修改行内框尺寸的唯一办法就是修改行高或者水平边框、水平内边距和外边距</p>
<a id="more"></a>
<h4 id="3-2-2相对定位"><a href="#3-2-2相对定位" class="headerlink" title="3.2.2相对定位"></a>3.2.2相对定位</h4><p>相对定位移动位置之后,元素仍然占据原来的空间，因此，这样移动会造成它覆盖其他框<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.myBox&#123;</span><br><span class="line">  position:relative;</span><br><span class="line">  left:20px;</span><br><span class="line">  top:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-9868a0667fe84899.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="相对定位.png"></p>
<p>####3.2.3绝对定位<br>相对定位实际上可以看做普通流定位模型中的一部分，因为元素的位置是相对于他在普通流中的位置。<br>绝对定位使元素的位置与文档流无关，因此不占据空间，普通文档流中其他元素的布局就是绝对定位的元素不存在一样。</p>
<p><strong>相对定位是“相对于”元素在文档流中的初始位置，而绝对定位是“相对于”距离它最近的已定位祖先元素，如果不存在已定位的祖先元素，那么相对于初始包含块</strong></p>
<h4 id="3-2-4浮动"><a href="#3-2-4浮动" class="headerlink" title="3.2.4浮动"></a>3.2.4浮动</h4><p>1、现象<br>浮动会让元素脱离文档流，不再影响不浮动的元素，实际上并不完全如此。<br>浮动元素后面的文档流元素，这个元素的框不受浮动影响，但是其中的文本元素会受影响，会移动以留出空间。技术术语：浮动元素旁边的行框被缩短，从而给浮动元素留出空间，因此行框围绕浮动框。实际上，创建浮动框使文本可以围绕图像。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-4870d142ade4e027.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不浮动.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-a50aad9c8a8471f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="浮动.png"></p>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则表达式-小笔记]]></title>
      <url>/2017/06/12/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>正则表达式（regular expression）描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串</p>
<ul>
<li><code>+</code>表示前面的字符至少出现一次<br>  <code>run00+b</code>,可以匹配<code>run00b</code>、<code>run0000000b</code></li>
<li><code>*</code>表示前面的字符至少出现0次<br>  <code>run00*b</code>,可以匹配<code>run0b</code>、<code>run0000b</code></li>
<li><p><code>?</code>表示前面的字符最多只出现一次<br>  <code>colou?r</code>可以匹配<code>color</code>或者<code>colour</code></p>
  <!-- 待续 --></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css打造Mac Air]]></title>
      <url>/2017/03/20/css%E6%89%93%E9%80%A0Mac-Air/</url>
      <content type="html"><![CDATA[<p>期待的效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-08de2880d67fe06e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<a id="more"></a>
<p>####第0步</p>
<ol>
<li><p>box-shadow:0 5px 6px rgb(160,160,160);<br>基本语法是{box-shadow:[inset] x-offset y-offset blur-radius spread-radiuscolor}<br>对象选择器 {box-shadow:[投影方式] X轴偏移量 Y轴偏移量阴影模糊半径 阴影扩展半径 阴影颜色}</p>
<p>最后从div的左下角到右上角以60度添加一个线性渐变linear-gradient，是从白色开始从四分之一出过渡到灰色。</p>
</li>
<li>linear-gradient   <a href="http://www.jianshu.com/writer#/notebooks/6305867/notes/8965431" target="_blank" rel="noopener">css渐变</a></li>
</ol>
<p>####第1步<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.board&#123;</span><br><span class="line">    background: rgb(210,210,210);</span><br><span class="line">    width:600px;</span><br><span class="line">    height:450px;</span><br><span class="line">    margin:0 auto;</span><br><span class="line">    -webkit-border-radius:20px;</span><br><span class="line">    -moz-border-radius:20px;</span><br><span class="line">    border-radius:20px;</span><br><span class="line">    box-shadow: 0px 5px 6px rgb(160,160,160);</span><br><span class="line">//线性渐变</span><br><span class="line">    background: -webkit-linear-gradient(60deg,rgba(250,250,250,1)25%,rgba(210,210,210,1)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此时，面板已经打造完成，效果呢，就像下面这个样子，忽略那些字符吧</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-a2fb98eeb2c8f04c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>####第2步 盖子<br>.board:before{ }<br>伪元素 要设置<code>display</code>属性，才可以确定它的样式，并显示出来</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-7d412f99e090f56e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>border-top-left-radius：border-bottom-right-radius: length|% [length|%];<br>注释：border-top-left-radius 属性的长度值和百分比值定义四分之一椭圆（定义外部边框边缘的边角形状）的半径（radii）。第一个值是水平半径，第二个值是垂直半径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rgb(30,60,100,180,210)各自的颜色趋向</span><br><span class="line">box-sizing</span><br><span class="line">box-shadow</span><br><span class="line">background: -webkit-linear-gradient(top,rgb(30,30,30),rgb(60,60,60)35%,rgb(100,100,100)50%,rgb(30,30,30)65%);</span><br></pre></td></tr></table></figure>
<p>当啷，键盘区画好啦<br><img src="http://upload-images.jianshu.io/upload_images/1424949-1f791159b13bdb73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"><br>我们用box-shadow给keyboard的四条边框添加四条内部inset阴影，关于box-shadow以后有机会再讲，先把实现和效果贴上：</p>
<p>五、第五步</p>
<blockquote>
<p><a href="http://mp.weixin.qq.com/s/K33g-rlU0_AVMQADyPN-Aw" target="_blank" rel="noopener">http://mp.weixin.qq.com/s/K33g-rlU0_AVMQADyPN-Aw</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css命名准则]]></title>
      <url>/2017/03/12/css%E5%91%BD%E5%90%8D%E5%87%86%E5%88%99/</url>
      <content type="html"><![CDATA[<p>####一、名字的本质是什么<br>    对于css，为了避免样式冲突，我们总是会赋予它相当特殊的命名，或者是在选择符上添加HTML标记，或是使用层级。我们会在避免冲突上狠作文章，所谓过犹不及，结果又是一个烂摊子，重用性会很低很低，这就导致本是窈窕淑女，却变得臃肿不堪。<br><a id="more"></a><br>例如，下面人人网的css命名（张鑫旭大大说需要这种反面例子的时候就去找人人和新浪，一找一个准(●’◡’●)）：<br><img src="http://upload-images.jianshu.io/upload_images/1424949-2795f43b32344cf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="人人.png"><br>    我们都希望写出精简高效的css代码，如果css重用性越高，就越高效，这个时候命名就要越简单、越容易被重用。BUT，简单的命名越容易造成样式冲突，例如 .more{ }。从这点上来说，【重用性】与【样式冲突】是两个对立的矛盾体。<br>    不过，这种矛盾并不是不可以调和的，记住一些准则和方法，css 既可以有高效的重用性，又不会有样式冲突。</p>
<ul>
<li>面向属性的命名方法</li>
</ul>
<blockquote>
<p>整理借鉴于<a href="http://www.zhangxinxu.com/wordpress/2010/09/%E7%B2%BE%E7%AE%80%E9%AB%98%E6%95%88%E7%9A%84css%E5%91%BD%E5%90%8D%E5%87%86%E5%88%99%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">张鑫旭大大的博文</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css三角形一些不得不说的故事]]></title>
      <url>/2017/01/12/css%E4%B8%89%E8%A7%92%E5%BD%A2%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%BE%97%E4%B8%8D%E8%AF%B4%E7%9A%84%E6%95%85%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>经常会用到三角形（比如对话啊，气泡之类的地方），用于明确指向发言者<br>总是百度一下成型的写法，一直想研究下，耐不住懒啊<br>终于打败的我的拖延症，整体下那些关于CSS三角形的故事</p>
<hr>
<p>分为两种 （1）类名；（2）伪类<br>貌似这两种写法都和border脱不了干系，那我们先来看看 border 的到底是如何作用在盒模型上的</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-960c590c514c6e59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="常见盒模型"><br><a id="more"></a><br>随便来个盒模型，当当当<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.Triangular  .bubble&#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    border-top:10px solid #000;</span><br><span class="line">    border-right:10px solid red;</span><br><span class="line">    border-bottom:10px solid blue;</span><br><span class="line">    border-left:10px solid green;</span><br><span class="line">    margin-top: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>原来border的四个边，在拐角相遇的时候，各占45°，嗯~ 很合理<br><img src="http://upload-images.jianshu.io/upload_images/1424949-aba7e30865bb059c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="随便来个盒模型"><br>既然这样，那定义类名写三角形就很简单了</p>
<p>一.   定义类名</p>
<hr>
<p>让内容为0，需要哪个方向的角，写那个方向的<code>boder</code>即可，需要注意的是，单单只写一个方向的<code>border</code>无效，需要相邻方向的<code>border</code>一起来定义，好比这是公共区域，一个人说了不算</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//两个方向</span><br><span class="line">.test&#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-top: 10px solid #000;</span><br><span class="line">    border-right：10px solid transparent;</span><br><span class="line">&#125;</span><br><span class="line">//三个方向</span><br><span class="line">.test&#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-top: 10px solid #000;</span><br><span class="line">    border-right：10px solid transparent;</span><br><span class="line">    border-left：10px solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-1e17bdffde7f6f2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="两个方向"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-79fb2b9654262b1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="三个方向"><br>综上：需要相邻的三个<code>border</code>才能定义一个水平垂直方向的三角形</p>
<p>写的简单一点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.test&#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border: 10px solid transparent;</span><br><span class="line">    border-top: 10px solid #000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>第二步，相对父元素定位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.father&#123;</span><br><span class="line">  position:relative;</span><br><span class="line">&#125;</span><br><span class="line">.test&#123;</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    border-right: 10px solid #000;</span><br><span class="line">    border: 10px solid transparent;</span><br><span class="line">    //定位</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: -10px;</span><br><span class="line">    top: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-4ebcb20dc0c87123.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="相对父元素定位"></p>
<p>—— 未完待续——<br>二.  利用伪类</p>
<hr>
]]></content>
      
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[http状态码]]></title>
      <url>/2017/01/02/http%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      <content type="html"><![CDATA[<ul>
<li>1XX : 信息类，表示收到的web浏览器请求，正在进一步的处理中</li>
<li>2XX ：成功，表示用户请求被正确接收，理解和处理，eg：200 OK</li>
<li>3XX ：重定向，表示请求没有成功，客户必须采取进一步的动作</li>
<li>4XX : 客户端错误，表示客户端提交的请求有错误，例如：404 NOT Found，意味着请求中所引用的文档不存在</li>
<li>5XX ：服务器错误，表示服务器不能完成队对请求的处理</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[两个静态html之间相互传值]]></title>
      <url>/2016/09/12/%E4%B8%A4%E4%B8%AA%E9%9D%99%E6%80%81html%E4%B9%8B%E9%97%B4%E7%9B%B8%E4%BA%92%E4%BC%A0%E5%80%BC/</url>
      <content type="html"><![CDATA[<blockquote>
<h4 id="关键词-：url"><a href="#关键词-：url" class="headerlink" title="关键词 ：url"></a>关键词 ：url</h4><h4 id="主要思想：-通过url-在两个页面之间传值"><a href="#主要思想：-通过url-在两个页面之间传值" class="headerlink" title="主要思想： 通过url 在两个页面之间传值"></a>主要思想： 通过url 在两个页面之间传值</h4></blockquote>
<p>  1、 a.html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;    </span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;    </span><br><span class="line">  &lt;title&gt;a&lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; id=&quot;name&quot; class=&quot;input7&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;button&quot; value=&quot;OK&quot; onclick=&quot;show()&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;    </span><br><span class="line">  function show()&#123;        </span><br><span class="line">    var result = document.getElementById(&quot;name&quot;).value;        </span><br><span class="line">    location.href=&quot;b.html?name=&quot;+result;      //利用url参数传递！！！</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p> 2、b.html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;    </span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;    </span><br><span class="line">&lt;title&gt;b&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;    </span><br><span class="line">  &lt;input type=&quot;button&quot; onclick=&quot;getValue(&apos;name&apos;)&quot; value=&quot;GetValue&quot;/&gt;</span><br><span class="line">&lt;script&gt;    </span><br><span class="line">function getValue(name) &#123;        </span><br><span class="line">  var str = window.location.search;   // location.search是从当前URL的?号开始的字符串        </span><br><span class="line">  if (str.indexOf(name) != -1) &#123;            </span><br><span class="line">      var pos_start = str.indexOf(name) + name.length + 1;            </span><br><span class="line">      var pos_end = str.indexOf(&quot;&amp;&quot;, pos_start);            //检查是否有其他的参数传递</span><br><span class="line">      if (pos_end == -1) &#123;                </span><br><span class="line">          alert(str.substring(pos_start));            </span><br><span class="line">      &#125; else &#123;         </span><br><span class="line">         alert(&quot;没有此值~~&quot;);            </span><br><span class="line">      &#125;        </span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>3、效果图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1424949-110e129750b02566.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
]]></content>
      
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
